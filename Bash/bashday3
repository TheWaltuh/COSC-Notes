

------------- BASH DAY 3 NOTES -------------



------------- BASH PARAMETERS -------------

- Variables are parameters set with a name (identifier) on the left of the equal sign and a value (or nothing) on the right side. 



-----SPECIAL PARAMETERS----

$# - NUmber of argument passes
$0 - script name
$2 - The 2nd argument passed
$* - Arguments passed to script
$? - Exit status of the last command executed
$




------------- FUNCTIONS -------------

- allows breaking of code into more manangeable blocks
- series of commands executed as if a single command
- declare functions first, the call it
- can contain varaibles, loops, accept parameters, and return a value

ex. 

function start () {
echo " Does this function work?"
}

function mid {
echo "This is the middle function"
}

hello_world() {
echo Hello World!
}


folder() {
	if [ ! -s $1 ]; then 
		mkdir $1
	else
		echo "STAHP"
		#this means it errored
		return 1
	fi }
	
folder $1
mid 
hello_world


- read is how you get user input 
ex.

read userchoice
case $userchoice in
(1) echo one ;;
(2) echo two ;;
(3) echo threee;;
(*) echo other ;;
eseac
}


------------- VARIABLE SUBSTITUTION -------------

sub1 () {
	name = "John"
	echo $name
}
sub2 () {
	name="John"
	echo "My name is $name"
}
sub3 () {                            #'' print literal
	name="John"
	echo 'My name is $name'
}
sub4 () {                            #no value example
	name="John"
	echo "My name is $nameny5"   #nothing assigned doesn't print
	echo "My name is ${name}n5"  
}
sub5 () {                           #prints first 2 fields
	name="John"                 
	echo ${name:0:2}
}
sub1
sub2
sub3
sub4
sub5



------------- CHALLENGES -------------


11. Activity:

Using find, find all files under the $HOME directory with a .bin extension ONLY.
Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
Ensure there is no trailing / at the end of the directory path when outputting to standard output.
You may need to sort the output depending on the command(s) you use. Have each path displayed only once.


*** answer

find ~ -name "*.bin" -printf "%h\n" | sort | uniq


12. Activity:

-Write a script that will do the following.

Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional    parameter
Modify the copied line to change:
User name to the value specified by $2 positional parameter
Used id and group id to the value specified by $3 positional parameter
Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
The default shell to `/bin/bash'
Append the modified line to the end of the file


*** answer

username="$2"
home="/home/$2"
guid="$3"

tail -1 $1 | awk -F: -v "username=$username" -v "guid=$guid" -v "home=$home" -v "shell=$shell" 'OFS=":"{$1=username;$3=guid;$4=guid;$6=home;$7="/bin/bash"}{print}'  >> $1



13. Activity:

Find all executable files under the following four directories:
/bin
/sbin
/usr/bin
/usr/sbin
Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.


*** answer

ahh=$(find /bin /sbin /usr/bin /usr/sbin -type f -executable | sort | sed -n '10p')

md5=($(md5sum $ahh))
echo $md5



14. Activity:

Using any BASH command complete the following:

Sort the /etc/passwd file numerically by the GID field.
For the 10th entry in the sorted passwd file, get an md5 hash of that entryâ€™s home directory.
Output ONLY the MD5 hash of the directory's name to standard output.


*** answer

sort -n -t: -k4 /etc/passwd | sed -n '10p' | awk -F: '{print $6}'| md5sum | cut -d" " -f1



15. Activity:

Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var

Your script should:
Exclude file type named pipes. These can break your script.
Redirect STDOUT and STDERR to separate files.
Determine the count of files hashed in the file with hashes.
Determine the count of unsuccessfully hashed directories.
Have both counts output to the screen with an appropriate title for each count.


*** answer

find /bin /etc /var -maxdepth 3 ! -type p -exec md5sum {} \; 2>~/tsterror.txt 1>~/tsthash.txt
succ=$(grep -c / tsthash.txt)
unsuc=$(grep -c directory tsterror.txt)
echo "Successfully Hashed Files: $succ"
echo "Unsuccessfully Hashed Directories: $unsuc"



















