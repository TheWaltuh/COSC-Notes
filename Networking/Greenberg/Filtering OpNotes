### T1 ### USING IPTABLES
ssh student@172.16.82.106
Allow New and Established traffic to/from via SSH, TELNET, and RDP AND HTTP
  sudo iptables -A INPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
Only allow Pivot to perform ping (ICMP) operations to/from
  sudo iptables -A INPUT -p icmp -s 10.10.0.40 --icmp-type echo-request -j ACCEPT
  sudo iptables -A INPUT -p icmp -s 10.10.0.40 --icmp-type echo-request -j ACCEPT
  sudo iptables -A OUTPUT -p icmp -d 10.10.0.40 --icmp-type echo-reply -j ACCEPT
  sudo iptables -A OUTPUT -p icmp -d 10.10.0.40 --icmp-type echo-reply -j ACCEPT
Allow ports 6579 and 4444 for both udp and tcp traffic
  sudo iptables -A INPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
  sudo iptables -A INPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
  sudo iptables -A OUTPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP
  sudo iptables -P INPUT DROP
  sudo iptables -P OUTPUT DROP
  sudo iptables -P FORWARD DROP
nc -lp 9001

### T3 ### USING IP TABLES
Allow New and Established traffic to/from via SSH, TELNET, and RDP AND HTTP
  sudo iptables -A INPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP  
  sudo iptables -P INPUT DROP
  sudo iptables -P FORWARD DROP
  sudo iptables -P OUTPUT DROP
nc -lp 9003

### T2 ### USING NFT TABLES
  sudo nft add table ip CCTC
Create input and output base chains with: Hooks Priority of 0 Policy as Accept
  sudo nft add chain ip CCTC input {type filter hook input priority 0 \; policy accept \;}
  sudo nft add chain ip CCTC output {type filter hook output priority 0\; policy accept \;}
Allow New and Established traffic to/from via SSH, TELNET, and RDP AND HTTP
  sudo nft insert rule ip CCTC input tcp dport { 22, 23, 3389, 80 } ct state { new, established } accept
  sudo nft insert rule ip CCTC output tcp sport { 22, 23, 3389, 80 } ct state { new, established } accept
Only allow Pivot to perform ping (ICMP) operations to/from
  sudo nft insert rule ip CCTC input ip saddr 10.10.0.40 icmp type { echo-request, echo-reply } accept
  sudo nft insert rule ip CCTC output ip daddr 10.10.0.40 icmp type { echo-request, echo-reply } accept
Allow ports 5050 and 5150 for both udp and tcp traffic to/from
  sudo nft insert rule ip CCTC input tcp dport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC input tcp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC input udp dport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC input udp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output tcp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output tcp dport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output udp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output udp dport { 5050, 5150 } accept
Change your chains to now have a policy of Drop
  sudo nft add chain ip CCTC input {type filter hook input priority 0 \; policy drop \;}
  sudo nft add chain ip CCTC output {type filter hook output priority 0\; policy drop \;}
nc -lp 9002

iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 172.16.82.106

sudo nft add table ip NAT
sudo nft add chain NAT PREROUTING {type nat hook prerouting priority 0 \; }
sudo nft add chain NAT POSTROUTING {type nat hook postrouting priority 0 \; }
sudo nft add rule NAT POSTROUTING ip saddr 192.168.3.30 oif eth0 snat 172.16.82.112


