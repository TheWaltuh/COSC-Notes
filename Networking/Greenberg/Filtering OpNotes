### T1 ### USING IPTABLES
ssh student@172.16.82.106
Allow New and Established traffic to/from via SSH, TELNET, and RDP AND HTTP
  sudo iptables -A INPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
Only allow Pivot to perform ping (ICMP) operations to/from
  sudo iptables -A INPUT -p icmp -s 10.10.0.40 --icmp-type echo-request -j ACCEPT
  sudo iptables -A INPUT -p icmp -s 10.10.0.40 --icmp-type echo-request -j ACCEPT
  sudo iptables -A OUTPUT -p icmp -d 10.10.0.40 --icmp-type echo-reply -j ACCEPT
  sudo iptables -A OUTPUT -p icmp -d 10.10.0.40 --icmp-type echo-reply -j ACCEPT
Allow ports 6579 and 4444 for both udp and tcp traffic
  sudo iptables -A INPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
  sudo iptables -A INPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
  sudo iptables -A OUTPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP
  sudo iptables -P INPUT DROP
  sudo iptables -P OUTPUT DROP
  sudo iptables -P FORWARD DROP
nc -lp 9001

### T3 ### USING IP TABLES
Allow New and Established traffic to/from via SSH, TELNET, and RDP AND HTTP
  sudo iptables -A INPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m multiport --ports 22,23,3389,80 -m state --state NEW,ESTABLISHED -j ACCEPT
Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP  
  sudo iptables -P INPUT DROP
  sudo iptables -P FORWARD DROP
  sudo iptables -P OUTPUT DROP
nc -lp 9003

### T2 ### USING NFT TABLES
  sudo nft add table ip CCTC
Create input and output base chains with: Hooks Priority of 0 Policy as Accept
  sudo nft add chain ip CCTC input {type filter hook input priority 0 \; policy accept \;}
  sudo nft add chain ip CCTC output {type filter hook output priority 0\; policy accept \;}
Allow New and Established traffic to/from via SSH, TELNET, and RDP AND HTTP
  sudo nft insert rule ip CCTC input tcp dport { 22, 23, 3389, 80 } ct state { new, established } accept
  sudo nft insert rule ip CCTC output tcp sport { 22, 23, 3389, 80 } ct state { new, established } accept
Only allow Pivot to perform ping (ICMP) operations to/from
  sudo nft insert rule ip CCTC input ip saddr 10.10.0.40 icmp type { echo-request, echo-reply } accept
  sudo nft insert rule ip CCTC output ip daddr 10.10.0.40 icmp type { echo-request, echo-reply } accept
Allow ports 5050 and 5150 for both udp and tcp traffic to/from
  sudo nft insert rule ip CCTC input tcp dport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC input tcp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC input udp dport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC input udp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output tcp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output tcp dport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output udp sport { 5050, 5150 } accept
  sudo nft insert rule ip CCTC output udp dport { 5050, 5150 } accept
Change your chains to now have a policy of Drop
  sudo nft add chain ip CCTC input {type filter hook input priority 0 \; policy drop \;}
  sudo nft add chain ip CCTC output {type filter hook output priority 0\; policy drop \;}
nc -lp 9002

iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 172.16.82.106

sudo nft add table ip NAT
sudo nft add chain NAT PREROUTING {type nat hook prerouting priority 0 \; }
sudo nft add chain NAT POSTROUTING {type nat hook postrouting priority 0 \; }
sudo nft add rule NAT POSTROUTING ip saddr 192.168.3.30 oif eth0 snat 172.16.82.112


What command was used to run snort on that machine.
  ps -elf | grep snort
which SNORT rule would create an alert when No TCP Flags are set or the URG, PUSH, and FIN TCP Flags are set?
  cat /etc/snort/rules/<filename>.rules | grep "flag"
which SNORT rule would create an alert when the Hex Indicator of a NOP Sled are detected
  cat /etc/snort/rules/<filename>.rules | grep "90 90"
which SNORT rule would create an alert when a DNS Zone Transfer is detected with the content specified in CVE-1999-0532
   cat /etc/snort/rules/<filename>.rules | grep -i "CVE"
which SNORT rule would create an alert when an ICMP Message is detected.
  cat /etc/snort/rules/<filename>.rules | grep -i "icmp"
Using the provided Traffic Capture (/home/activity_resources/pcaps/ids.pcap) how many alerts are created with the default ICMP rule?
  sudo snort -r /home/activity_resources/pcaps/ids.pcap -c /etc/snort/rules/icmp.rules
Rule Definition: alert any ICMP Messages Source to destination Message = Cows HEX content = DEADBEEF Set sid to 1000001
  alert icmp any any -> any any ( msg:"Cows"; content:"|DEADBEEF|"; sid:1000001; )
Utilizing your INTERNET_HOST, and the provided Traffic Capture how many alerts are created with the content of DEADBEEF?
  sudo snort -r /home/activity_resources/pcaps/ids.pcap -c /etc/snort/rules/cows.rules
Rule Definition: alert any ICMP Echo Requests Detects Type 8 / Code 0 To 10.3.0.0/24 Generate the message DMZ Ping Set sid to 1000002
  alert icmp any any -> 10.3.0.0/24 any (msg:"DMZ Ping";itype:8;icode:0;sid:1000002;)
Track 3 ssh authentication attempts within 10 seconds coming from a Specific Source using both threshold.
  alert tcp any any -> any 22 (msg:"SSH Brute Force";type:threshold;sid:1000003;)
Track 3 ssh authentication attempts within 10 seconds coming from a Specific Source using both threshold.
  alert tcp any any -> any 22 (msg:"SSH Brute Force";threshold: type both, track by_src, count 3, seconds 10;sid:1000003;)
Track IP Protocol and RDP traffic to and from 10.1.0.0/16 regardless of the traffic flow state.
  alert ip any any <> 10.1.0.0/16 3389 (msg:"RDP messages";sid:1000004;)
Detect TCP Null scan to 10.3.0.0/24 regardless of the traffic flow state.
  alert tcp any any -> 10.3.0.0/24 any (msg:"NMAP Null Scan";flags:0;sid:1000005;)
WannaCry ransomware and other Malware often use SMB and CIFS protocols as an attack vector for propagation. Identify the ports these protocols use.
  alert tcp any any -> 10.0.0.0/8 139 (msg:"WannaCry";sid:1000006;)
  alert tcp any any -> 10.0.0.0/8 445 (msg:"WannaCry";sid:1000007;)
  alert udp any any -> 10.0.0.0/8 137 (msg:"WannaCry";sid:1000008;)
  alert udp any any -> 10.0.0.0/8 138 (msg:"WannaCry";sid:1000009;)
