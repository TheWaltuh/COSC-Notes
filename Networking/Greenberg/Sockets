----Sockets
  Stream Socket - used with TCP, Stream Control Transmission Protocol(SCTP), and Bluetooth. Connection oriented and sequenced.
  Datagram Socket - used with UDP. NO mechanism to retransmit data is a packet is dropped.
  Raw Socket - direct sending and receiving of IP packets without automatic protocol-specific formatting
    Used in tcpdump, nmap, and wireshark
---User Space/Kernel Space
  OS's uses API's and libraries or order to manage the functions that span user to kernel space
  STREAM and DGRAM sockets are user space sockets
  RAW sockets are kernel space
---Python Libraries 
Can Contain
  Modules: defines functions, classes, and variables
  Function: organized, resuable code
  Methods: performs a task within a function
  Exceptions: special condition encountered
  Constants: data or a value that does not change
  Objects: used in object-oriented programming
  Collections(Arrays) 
    List: changeable
    Tuple: unchangeable
    Set: unindexed
    Dictionary: unordered, changeable, and indexed
  Data Types
    Integer :: Float :: Complex Numbers :: Strings :: List :: Tuples :: Range :: Dict :: Set :: Frozenset :: Boolean :: Bytes :: ByteArrays :: MemoryViews
---Python3 and Sockets
  import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTCOL)
    FAMILY constants :: AF_INET and AF_INET6
    TYPE constants :: SOCK_STREAM, SOCK_DGRAM, and SOCK_RAW
    PROTOCOL constants :: 0 and IPPROTO_RAW
---Socket API Functions
  socket() :: creates a new socket
  bind() :: associates a socket and a socket address
  listen() :: bound TCP socket to enter a listening state
  connect() :: assigns a free local port to a socket
  accept() :: create a new TCP connection from the remote client
  send() :: sendall() :: recv() :: sendto() :: recvfrom() :: sending and receiving data
  close() :: release resources allocated to a socket
  gethostbyname() :: gethostbyaddr() :: resolve hostnames and addresses
  select() :: waiting for one or more from a provided list of sockets to be ready to read and write
  poll() :: check a state of a socket
  getsockopt() :: current value of a socket option
  setsockopt() :: set a socket option
  
--Stream Socket Example
#!/usr/sbin/python3
# import module for sockets
import socket
#   This can also be accomplised by using s= socket.socket() due to AF_INET and SOCK_STREAM being default
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Network sockets need both an IP address and a port
HOST = '127.0.0.1'
PORT = 54321
# Connecting to the above local address and port
s.connect((HOST, PORT))
# To send a string as a butes-like object, add the prefix b to the string. \n is used to go to the next lin$
s.send(b'Hello is it me you\'re looking for\n')
# It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of b$
response, conn = s.recvfrom(1024)
# In order to receive a message that is sent as a bytes-like-object you must decode into utf-8 (default)
print(response.decode())
s.close()
echo "this message will send" | nc -lp 54321

--Dgram Socket Example
#!/usr/sbin/python3
# import module for sockets
import socket
#   This can also be accomplised by using s= socket.socket() due to AF_INET and SOCK_STREAM being default
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# Network sockets need both an IP address and a port
HOST = '127.0.0.1'
PORT = 54321
#s.connect((HOST, PORT)) # removed because this UDP which is connection-less
# To send a string as a butes-like object, add the prefix b to the string. \n is used to go to the next lin$
s.sendto(b'Die Hard is a Christmas movie!\n', (HOST,PORT))
# It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of b$
response, conn = s.recvfrom(1024)
# In order to receive a message that is sent as a bytes-like-object you must decode into utf-8 (default)
print(response.decode())
#s.close() # connection was never opened, so no need to close it
echo "this message will show for udp" | nc -lp 54321 -u

--Raw Socket Example IPv4
# For building the socket
import socket
# For system level commands
import sys
"""
For establishing packet structure (used later on), this will allow access to the function in the struct $
"""
from struct import * 
# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()
packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"
# Lets add the IPv4 header information
ip_ver_ihl = 69 # This is putting the decimal conversion 0x45 for Version and Internet Header Length
ip_tos = 0      # This combines the DSCP and ECN fields
ip_len = 0      # The kernel will fill in the actual length of the packet
ip_id = 12345   # This sets the ip identification for the packet
ip_frag = 0     # This sets fragmentation to off
ip_ttl = 64     # This determines the ttl of the packet when leaving the machine
ip_proto = 16   
"""
This sets the IP protocol to 16 (Chaos). If this was 6 (TCP) or 17 (UDP) additional header would be requ$
"""
ip_check = 0                         # The kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip) # will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip) # will convert and IP address to a 32 bit binary number
# After our variables are declared above we need to put them in order, in a variable below
ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check$
"""
B - 1 byte (Byte)
H - 2 bytes (Half Word)
4s - 4 bytes (Word - converted from string to binary
"""
# Making the packet
message = b'The bird is the word'
packet = ip_header + message
# Sending the packet
s.sendto(packet, (dst_ip, 0))

--Raw Socket Example TCP
# For building the socket
import socket
# For system level commands
import sys
# For doing an array in the TCP checksum
import array
"""
For establishing packet structure (used later on), this will allow access to the function in the struct $
"""
from struct import * 
# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()
packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"
# Lets add the IPv4 header information
ip_ver_ihl = 69 # This is putting the decimal conversion 0x45 for Version and Internet Header Length
ip_tos = 0      # This combines the DSCP and ECN fields
ip_len = 0      # The kernel will fill in the actual length of the packet
ip_id = 12345   # This sets the ip identification for the packet
ip_frag = 0     # This sets fragmentation to off
ip_ttl = 64     # This determines the ttl of the packet when leaving the machine
ip_proto = 6   
"""
This sets the IP protocol to 6 (TCP). If this was 6 (TCP) or 17 (UDP) additional header would be required
"""
ip_check = 0                         # The kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip) # will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip) # will convert and IP address to a 32 bit binary number
# After our variables are declared above we need to put them in order, in a variable below
ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check$
"""
# TCP Header field
tcp_src = 54321 # source port
tcp_dst = 7777  # destination port
tcp_seq = 454   # sequence number
tcp_ack_seq = 0 # tcp ack equence number
tcp_data_off = 5 # data offset specifying the size of the tcp header * 4 which is 20
tcp_reserve = 0 # the 3 reserve bits + ns flag in the reserve field
tcp_flags = 0 # tcp flags field before the bits are turned on
tcp_win = 65535 # maximum  allowed window size recorded to network order
tcp_chk = 0 # tcp checksum which will be calculated later on
tcp_urg_ptr = 0 # urgent pointer only if urg flag is set
# Combine the left shifted 4 bit tcp offset and the reserve field
tcp_off_res = (tcp_data_off << 4) + tcp_reserve
#  Tcp Flags by bit starting from right to left
tcp_fin = 0 # Finished
tcp_syn = 1 # Synchronized
tcp_rst = 0 # Reset
tcp_psh = 0 # Push
tcp_ack = 0 # Acknowledgment
tcp_urg = 0 # Urgent
tcp_ece = 0 # Explicit Congestion Notification Echo
tcp_cwr = 0 # Congestion Window Reduce
# Chombine the tcp flags by left shifting the bit locations and adding the bits together
tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh << 3) + (tcp_ack << 4) + (tcp_urg << 5)$
# The ! in the pack format string means network order
tcp_hdr = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win, tc$
"""
B - 1 Byte (Byte)
H - 2 Bytes (Half Word)
L - 4 Bytes (32 bit word as an integer)
"""
# Making the packet
user_data = b'Desperate times call for desperate measures'
# Pseduo Header fields
src_address = socket.inet_aton(src_ip)
dst_address = socket.inet_aton(dst_ip)
reserved = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_hdr) + len(user_data)
# Pack the psuedo header and combine with user data
ps_hdr = pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + user_data
def checksum(data):
        if len(data) % 2 != 0:
                data += b'\0'
        res = sum(array.array("H", data))
        res = (res >> 16) + (res & 0xffff)
        res += res >> 16
        return (~res) & 0xffff
tcp_chk = checksum(ps_hdr)
#Pack the tcp header to fill in the correct checksum - it is NOT in network byte order
tcp_hdr = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pa$
# Combine all the headers and the user data
packet = ip_header + tcp_hdr + user_data
# Sending the packet
s.sendto(packet, (dst_ip, 0))
