

-----------------------------------------------------------------------------------------[TRAFFIC FILTERING]-------------------------------------------------------------------------------------------


-----[FILTERING DEVICES & MECHANISMS]-----
* Email addresses - to block unwanted email and increase productivity

* Computer applications in an organization environment - for security from vulnerable software

* MAC filtering - also for security to allow only specific computers access to a network

* Network Traffic


[WHY FILTER NETWORK TRAFFIC?]
* Decrease load on network infrastructure

* Ensure data flows in an efficient manner

* Ensure data gets to intended recipients and only intended recipients

* Block malicious traffic

* Obfuscate network internals


-----[DEVICES USED TO FILTER TRAFFIC]-----

Switch							PACL & VACL					Layers 2
							ACL						Layers 3



Router							ACL						Layers 3 & 4




Proxies						Content Based such as:				]
							URL & DNS blacklist				
							MIME filtering					Layers  3-7
							Content keyword filtering			]

Intrusion Detection & Prevention Systems		Signatures					3-7




Host Based Firewall					Rules						Layers 3-7




Network Firewall					Rules
							Packet Filteres				Layers 3 & 4
							Stateful					Layers 3 & 4
							Application Layer FW				Layers 3-7
							Next Generation Firewall			Layers 3-7


-----[FILTERING CONCEPTS]-----
* Whitelist vs Blacklist

* Default policies and Implicit and Explicit rules

* Network Device Operation Modes

  - Routed

  - Transparent

* Intrusion Defense

  - Intrusion Detection Systems

  - Intrusion Prevention Systems

* Filtering Device Placement

* Firewall Filtering Methods

  - Stateless (Packet) Filtering (L3+4)

  - Stateful Inspection (L4)

  - Application Layer (L7)


-----[TRAFFIC DIRECTIONS]-----
* Traffic originating from the localhost to the remote-host

* Return traffic from that remote-host back to the localhost.

* Traffic originating from the remote-host to the localhost

* Return traffic from the localhost back to the remote-host.


----------------------------------------------------------------------------------------[HOST BASED FILTERING]-----------------------------------------------------------------------------------------

WINDOWS OR LINUX

-----[NETFILTER FRAMEWORK]-----
* Made to provide:

* packet filtering

* stateless/stateful Firewalls

* network address and port translation (NAT and PAT)
  - NAT is a 1-1 translation using ips
  - PAT uses ports to assign multiple ips to 1 ip

* other packet manipulation


-----[NETFILTER HOOKS]-----
* NF_IP_PRE_ROUTING → PREROUTING

* NF_IP_LOCAL_IN → INPUT

* NF_IP_FORWARD → FORWARD

* NF_IP_LOCAL_OUT → OUTPUT

* NF_IP_POST_ROUTING → POSTROUTING

-----[NETFILTER PARADIGM]-----
* tables - contain chains

* chains - contain rules

* rules - dictate what to match and what actions to perform on packets when packets match a rule


----------------------------------------------------------------------------------------[CONFIGURING IPTABLES]-----------------------------------------------------------------------------------------


-----[SEPARATE APPLICATIONS]-----
* Netfilter created several (separate) applications to filter on different layer 2 or layer 3+ protocols.

* iptables - IPv4 packet administration

* ip6tables - IPv6 packet administration

* ebtables - Ethernet Bridge frame table administration

* arptables - arp packet administration



-----[EACH APPLICATION HAD SEVERAL TABLES AND CHAINS]-----
* filter - default table. Provides packet filtering.

  - INPUT, FORWARD, and OUTPUT

* nat - used to translate private ←→ public address and ports.

  - PREROUTING, POSTROUTING, and OUTPUT

* mangle - provides special packet alteration. Can modify various fields header fields.

  - All Chains: PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT.

* raw - used to configure exemptions from connection tracking.

  - PREROUTING and OUTPUT

* security - used for Mandatory Access Control (MAC) networking rules.

  - INPUT, FORWARD, and OUTPUT


-----[COMMON IPTABLES OPTIONS]-----
https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T51_iptables_options.png


-----[MODIFY IPTABLES]-----
* Flush table
iptables -t [table] -F

* Change default policy
iptables -t [table] -P [chain] [action]

* Lists rules with rule numbers
iptables -t [table] -L --line-numbers

* Lists rules as commands interpreted by the system
iptables -t [table] -S

* Inserts rule before Rule number
iptables -t [table] -I [chain] [rule num] [rules] -j [action]

* Deletes rule at number
iptables -t [table] -D [chain] [rule num]




sudo iptables -F
sudo iptables -L
sudo iptables -P OUTPUT ACCEPT
sudo iptables -P INPUT ACCEPT
sudo iptables -A INPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT





----------------------------------------------------------------------------------------[CONFIGURING NFTABLES]-----------------------------------------------------------------------------------------


-----[NFTABLE FAMILIES]-----
* ip - IPv4 packets

* ip6 - IPv6 packets

* inet - IPv4 and IPv6 packets

* arp - layer 2

* bridge - processing traffic/packets traversing bridges.

* netdev - allows for user classification of packets - nftables passes up to the networking stack (no counterpart in iptables)

-----[INTRODUCES CHAIN-TYPES]-----
There are three chain types:

* filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families

* route - to reroute packets - can be used with ip and ipv6 families only

* nat - used for Network Address Translation - used with ip and ip6 table families only


-----[CREATION OF HOOKS]-----
* PREROUTING

* POSTROUTING

* INPUT

* OUTPUT

* FORWARD

* INGRESS - used with NETDEV family only


-----[NFTABLE ENHANCEMENTS]-----
* one table command to replace multiple

* simpler, cleaner syntax

* less code duplication

* simultaneous configuration of IPv4 and IPv6


[1. CREATE THE TABLE]
nft add table [family] [table]
[family] = ip, ip6, inet, arp, bridge and netdev.

[table] = user provided name for the table.


[2. CREATE THE BASE CHAIN]
nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}
[chain] = User defined name for the chain.

[type] =  can be filter, route or nat.

[hook] = prerouting, ingress, input, forward, output or
         postrouting.

[priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.

; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.

 Use "\" to escape the ";" in bash


[3. CREATE A RULE IN THE CHAIN]
nft add rule [family] [table] [chain] [matches (matches)] [statement]
[matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)

(matches) = these are specific to the [matches] field.

[statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)


[MODIFY NFTABLES]
nft {list | flush} ruleset
nft {delete | list | flush } table [family] [table]
nft {delete | list | flush } chain [family] [table] [chain]
nft list table [family] [table] [-a]

Adds after position
nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

Inserts before position
nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

Replaces rule at handle
nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]

Deletes rule at handle
nft delete rule [family] [table] [chain] [handle <handle>]


sudo nft list ruleset
sudo nft list table filter - look as specific table
sudo nft add chain ip TABLENAME MyInput { type filter hook input priority 0 \; policy accept \; }    - Default policies
sudo nft add chain ip TABLENAME MyOutput { type filter hook output priority 0 \; policy accept \; }
sudo nft insert rule ip TABLENAME MyInput tcp dport 22 accept
sudo nft insert rule ip TABLENAME MyOutput tcp dport 22 accept
sudo nft insert rule ip TABLENAME MyInput tcp sport { 6010, 6011, 6012 } ct state { new, established } accept
sudo nft insert rule ip TABLENAME MyInput tcp dport { 6010, 6011, 6012 } ct state { new, established } accept
sudo nft insert rule ip TABLENAME MyOutput tcp sport { 6010, 6011, 6012 } ct state { new, established } accept
sudo nft insert rule ip TABLENAME MyOutput tcp dport { 6010, 6011, 6012 } ct state { new, established } accept
sudo nft list chain ip TABLENAME MyOutput -ann            - see rule handle numbers
sudo nft delete rule ip TABLENAME MyOutput handle 13      - delete rule by handle numbers


---------------------------------------------------------------------------------------------[NAT AND PAT]---------------------------------------------------------------------------------------------


-----[NAT AND PAT W/ IPTABLES]-----

[SOURCE NAT W/ IPTABLES]
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 1.1.1.1


[DESTINATION NAT W/ IPTABLES]
iptables -t nat -A PREROUTING -i eth0 -j DNAT --to 10.0.0.1


[SOURCE PAT W/ IPTABLES]
iptables -t nat -A POSTROUTING -p tcp -o eth0 -j SNAT --to 1.1.1.1:9001


[DESTINATION PAT W/ IPTABLES]
iptables -t nat -A PREROUTING -p tcp -i eth0 -j DNAT --to 10.0.0.1:8080


-----[NAT AND PAT W/ NFTABLES]-----
* Create the NAT table
nft add table ip NAT

* Create the NAT chains
nft add chain ip NAT PREROUTING {type nat hook prerouting priority 0 \; }
nft add chain ip NAT POSTROUTING {type nat hook postrouting priority 100 \; }


[CREATE THE NAT RULES]
* Source NAT
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.2 oif eth0 snat 144.15.60.11

* Destination NAT
nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3

* Source NAT w/ masquerade
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.0/24 oif eth0 masquerade

* Destination NAT (port forwarding) with redirect
nft add rule ip NAT PREROUTING tcp dport 80 redirect to 8080


-----------------------------------------------------------------------------------------[ROUTER AS A FILTER]------------------------------------------------------------------------------------------

Numbered Standard		1-99, 1300-1999 (expanded)		Source Address Only
Numbered Extended		100-199, 2000-2699 (expanded)		Source and Destination Address, Protocol (ip,icmp,tcp,udp) [Optional icmp type/code and tcp/udp port (22,23,80)]
Named Standard & Extended	User Created Name			Same as standard or extended

---------------------[ACL CREATION]---------------------
Demo> enable #enter privileged exec mode
Demo# configure terminal #enter global config mode
Demo(config)# access-list 37 ... (output omitted) ...
Demo(config)# ip access-list standard block_echo_request
Demo(config)# access-list 123  ... (output omitted) ...
Demo(config)# ip access-list extended zone_transfers


[STANDARD NUMBERED ACL SYNTAX]
router(config)# access-list {1-99 | 1300-1999}  {permit|deny}  {source IP add}
                {source wildcard mask}
router(config)#  access-list 10 permit host 10.0.0.1
router(config)#  access-list 10 deny 10.0.0.0 0.255.255.255
router(config)#  access-list 10 permit any


[STANDARD NAMED ACL SYNTAX]
router(config)# ip access-list standard [name]
router(config-std-nacl)# {permit | deny}  {source ip add}  {source wildcard mask}
router(config)#  ip access-list standard CCTC-STD
router(config-std-nacl)#  permit host 10.0.0.1
router(config-std-nacl)#  deny 10.0.0.0 0.255.255.255
router(config-std-nacl)#  permit any


[EXTENDED NUMBERED ACL SYNTAX]
router(config)# access-list {100-199 | 2000-2699} {permit | deny} {protocol}
                {source IP add & wildcard} {operand: eq|lt|gt|neq}
                {port# |protocol} {dest IP add & wildcard} {operand: eq|lt|gt|neq}
                {port# |protocol}
router(config)# access-list 144 permit tcp host 10.0.0.1 any eq 22
router(config)# access-list 144 deny tcp 10.0.0.0 0.255.255.255 any eq telnet
router(config)# access-list 144 permit icmp 10.0.0.0 0.255.255.255 192.168.0.0
                0.0.255.255 echo
router(config)# access-list 144 deny icmp 10.0.0.0 0.255.255.255 192.168.0.0
                0.0.255.255 echo-reply
router(config)# access-list 144 permit ip any any


[EXTENDED NAMED ACL SYNTAX]
router(config)# ip access-list extended  [name]
router(config-ext-nacl)# [sequence number] {permit | deny} {protocol}
                         {source IP add & wildcard} {operand: eq|lt|gt|neq}
                         {port# |protocol} {dest IP add & wildcard} {operand:
                         eq|lt|gt|neq} {port# |protocol}
router(config)# ip access-list extended CCTC-EXT
router(config-ext-nacl)# permit tcp host 10.0.0.1 any eq 22
router(config-ext-nacl)# deny tcp 10.0.0.0 0.255.255.255 any eq telnet
router(config-ext-nacl)# permit icmp 10.0.0.0 0.255.255.255 192.168.0.0
                         0.0.255.255 echo
router(config-ext-nacl)# deny icmp 10.0.0.0 0.255.255.255 192.168.0.0
                         0.0.255.255 echo-reply
router(config-ext-nacl)# permit ip any any


[APPLY AN ACL TO AN INTERFACE OR LINE]
router(config)#  interface {type} {mod/slot/port}
router(config)#  ip access-group {ACL# | name} {in | out}
router(config)#  interface s0/0/0
router(config-if)#  ip access-group 10 out
router(config)#  interface g0/1/1
router(config-if)#  ip access-group CCTC-EXT in
router(config)#  line vty 0 15
router(config)#  access-class CCTC-STD in


-----[INTRUSION DETECTION & PREVENTION SYSTEMS]-----
* Placement

  - In line

  - or not

* Recognition Methods

  - Signature

  - Heuristic aka Behavioral


-----[SNORT IDS/IPS RULE - HEADER]-----
[action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
Action - such as alert, log, pass, drop, reject

Protocol - includes TCP, UDP, ICMP and others

Source IP address - single address, CIDR notation, range, or any

Source Port - one, multiple, any, or range of ports

Direction - either inbound or in and outbound

Destination IP address - options mirror Source IP

Destination port - options mirror Source port


-----[SNORT IDS/IPS GENERAL RULE OPTIONS]-----
msg - specifies the human-readable alert message

reference - links to external source of the rule

sid - used to uniquely identify Snort rules

rev - uniquely identify revisions of Snort rules

Classtype - used to describe what a successful attack would do

priority - level of concern (1 - really bad, 2 - badish, 3 - informational)

metadata - allows a rule writer to embed additional information about the rule


-----[SNORT IDS/IPS PAYLOAD DETECTION OPTIONS]-----
content - looks for a string of text.

|binary data| - to look for a string of binary HEX

nocase - modified content, makes it case insensitive

depth - specify how many bytes into a packet Snort should search for the specified pattern

distance - how far into a packet Snort should ignore before starting to search for the specified pattern relative to the end of the previous pattern match

within - modifier that makes sure that at most N bytes are between pattern matches using the content keyword

offset - skips a certain number of bytes before searching (i.e. offset: 12)


-----[SNORT IDS/IPS NON-PAYLOAD DETECTION OPTIONS]-----
Flow - direction (to/from client and server) and state of connection (established, stateless, stream/no stream)

ttl - The ttl keyword is used to check the IP time-to-live value.

tos - The tos keyword is used to check the IP TOS field for a specific value.

ipopts - The ipopts keyword is used to check if a specific IP option is present

seq - check for a specific TCP sequence number

ack - check for a specific TCP acknowledge number.

flags - The flags keyword is used to check if specific TCP flag bits are present.

itype - The itype keyword is used to check for a specific ICMP type value.

icode - The icode keyword is used to check for a specific ICMP code value.


-----[SNORT IDS/IPS POST DETECTION OPTIONS]-----
logto - The logto keyword tells Snort to log all packets that trigger this rule to a special output log file.

session - The session keyword is built to extract user data from TCP Sessions.

react - This keyword implements an ability for users to react to traffic that matches a Snort rule by closing connection and sending a notice.

tag - The tag keyword allow rules to log more than just the single packet that triggered the rule.

activates - This keyword allows the rule writer to specify a rule to add when a specific network event occurs.

activated_by - This keyword allows the rule writer to dynamically enable a rule when a specific activate rule is triggered.

count - Allows the rule writer to specify how many packets to leave the rule enabled for after it is activated.


-----[SNORT IDS/IPS THRESHOLDING AND SUPPRESSION OPTIONS]-----
* type [limit | threshold | both]

  - limit alerts on the 1st event during defined period then ignores the rest.

  - Threshold alerts every [x] times during defined period.

  - Both alerts once per time internal after seeing [x] amount of occurrences of event. It then ignores all other events during period.

* track [by_src | by_dst] - rate is tracked either by source IP address, or destination IP address

* count [#] - number of rule matching in [s] seconds that will cause event_filter limit to be exceeded

* seconds [seconds] - time period over which count is accrued. [s] must be nonzero value


-----[SNORT RULE EXAMPLE]-----
* Look for anonymous ftp traffic:
    alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; sid:2121; )

* This will cause the pattern matcher to start looking at byte 6 in the payload)
    alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; offset:5; sid:2121; )

* This will search the first 14 bytes of the packet looking for the word “anonymous”.
    alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; depth:14; sid:2121; )

* Deactivates the case sensitivity of a text search.
    alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; nocase; sid:2121; )


-----[RULE HEADER]-----
* ICMP ping sweep
    alert icmp any any -> 10.1.0.2 any (msg: "NMAP ping sweep Scan"; dsize:0; sid:10000004; rev: 1; )

* Look for a specific set of Hex bits (NoOP sled)
    alert tcp any any -> any any (msg:"NoOp sled"; content: "|9090 9090 9090|"; sid:9090; rev: 1; )

* Incorrect telnet login attempt
    alert tcp any 23 -> any any (msg:"TELNET login incorrect"; content:"Login incorrect"; flow:established,from_server; classtype:bad-unknown; sid:2323; rev:6; )


-----[FAILED IDS/IPS]-----
* Fail open

* Fail close


-----[ATTACKING & EVADING IDS/IPS]-----
    Based on Delta between devices

* Insertion Attack

  - IDS accepts packet

  - Host will not accept packet

* Evasion Attacking

  - IDS does not accept packet

  - Host will accept packet


-----[TECHNICAL ATTACKS ON IDS/IPS]-----
packet sequence manipulation

fragmenting payload

overlapping fragments with different reassembly by devices

Manipulating TCP headers

Manipulating IP options

Sending data during the TCP connection setup


-----[NON-TECHNICAL ATTACKS AGAINST IDS/IPS]-----
* attacking during periods of low manning
  Example - Ramadan 2012 Saudi Aramco attack

* attacking during a surge in activity
  Example - Target Corp. Point of Sale machines during the Thanksgiving-Christmas 2013 shopping season


-----[STRENGTHENING DEFENSIVE SYSTEMS]-----
* Linking IDS/IPS to other tools

* Multiconfig

* Tuning

* HIDS and File Integrity


---------------------------------------------------------------------------------------------[Challenges]----------------------------------------------------------------------------------------------

T@bl3sth@tF1lt3r
N@tF1lt3rsf0rL1f3

Task 1
IPTables/NFTables - Host Filtering

You are required to Setup and Test all Rules, prior to implementing any DROP Policy as you may lose connection if improperly configured. Notify Mission Command(Instructor) if connections are dropped.

IPTable Rule Definitions for T1

IPTable Rule Definitions for T3

NFTable Rule Definitions for T2

Validation of IPTables and NFTables

---------------------------------------------------------------------------------------------------------


Task 2
IPTables/NFTables - NAT

You are required to establishing NAT policies for T5 and T6 through the respective BLUE_HOST's they are attached to.

Prepare T1 for NAT Configurations

Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to ACCEPT

Flush your current iptables rules.

Temporarily enable IPv4 forwarding using the /proc/sys/net/ipv4/ip_forward file

Prepare T5 for NAT Configurations

Ensure there is a Default GW entry present for 192.168.1.1

You can use sudo ip route replace default via 192.168.1.1


Prepare T2 for NAT Configurations

Change your chains to now have a policy of Accept

Flush your current nftables rules.

Temporarily enable IPv4 forwarding using the /proc/sys/net/ipv4/ip_forward file

Prepare T6 for NAT Configurations

Ensure there is a Default GW entry present for 192.168.3.1

You can use sudo ip route replace default via 192.168.3.1


---------------------------------------------------------------------------------------------------------


Task 3
Signatures

Gorgan Cyber Forces have captured targeted traffic related to specific Indicators of Compromise (IOCs) relating to Donovian Actors. They have stored the Traffic Capture on the Pivot:

/home/activity_resources/pcaps/ids.pcap

They have also provided the following syntax for utilizing Snort, their implemented IDS Signature solution:

To Capture traffic over the network using Snort:
sudo snort -D -i eth0 -l /var/log/snort/ -c /etc/snort/snort.conf
Use Snort signatures against a pcap:
sudo snort -r /home/activity_resources/pcaps/ids.pcap -c snort.rule
---------------------------------------------------------------------------------------------------------

Tools/Techniques: Wireshark, TCPDump, Open Source Research (OSR)

Prior Approvals: The Gorgan Government has mandated that all protections are required to be tested and validated prior to Droping and/or Blocking any traffic. Seek any clarifying guidance from Mission Command(Instructor), and ensure approval is received prior to moving between the different tasks.

Scheme of Maneuver:
Task 1
> Linux Ops Station
→ INTERNET_HOST
-→ BLUE_Host-1
-→ BLUE_Host-3
-→ BLUE_INT_DMZ_HOST-1

Target Section:

Pivot
Hostname: INTERNET_HOST
IP: 10.10.0.40 (Use the provided floating IP only for login from outside of the network
Creds: PROVIDED CREDENTIALS
Action: Utilize to Pivot into Gorgan Cyberspace and test filters & Rules

T1
Hostname: BLUE_Host-1
IP: 172.16.82.106
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

T2
Hostname: BLUE_Host-3
IP: 172.16.82.112
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

T3
Hostname: BLUE_INT_DMZ_HOST-1
IP: 172.16.40.10
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

T4
Hostname: (Will be provided by Mission Command)
IP: 10.50.XXX.XXX (Will be Provided by Mission Command)
creds: studentX:passwordX (X = Student Number)
Known Ports: Unknown
Action: Interrogate Target and validate Signatures

T5
Hostname: BLUE_PRIV_HOST-1
IP: 192.168.1.10
creds: student : password
Action: Allow traffic through NAT Capabilities

T6
Hostname: BLUE_PRIV_HOST-3
IP: 192.168.3.30
creds: student : password
Action: Allow traffic through NAT Capabilities
