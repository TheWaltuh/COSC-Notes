

DAY 9

================Traffic filtering================


types of Filtering devices:
    Switch: layer 2-3
    Router: layer 3-4
    Proxies: 3-7
    IDS/PS: 3-7
    Host Based Firewall: 3-7
    Network Firewall: 3-7
        Rules,
        Packet Filtering
        Stateful/connection based
        Application Layer FW
        Next Generation FW


Whitelist:
    list of people you will always allow, block everything else.
    last rule is deny any
Blacklist:
    list of people to block, allow everyone else.
    last rule is allow any
    
routed: 
    router will show routes to anyone who asks. 
transparent:
    router won't show anything, but will still do the routes. 



Intrusion Defense:
    An intrusion prevention system is just an intrusion detection sytem that blocks the traffic.
    Stateless (packet, L3+4) filtering:
        
        
    Stateful Inspection (L4):
        Look at the TCP headers to track what part of the conversation you're in.
        Can use the established line.
        
    Application (L7):
        Can allow specific applications access. 
        
        


Windows vs Linux:
    Linux:
        IPtables
        NFtables
        
        
    Windows:
        


filter  - default table. Filtering
nat  - used to translate private to public ip address & ports
mangle  - change packets & header fields


IP Tables options:
    -A - append a rule at bottom
    -I - insert rule at top of list
    -D - Delete a rule
    -P - change default policy for a chain
    -p - list a protocol
    --sport/dport - address a specific port number
    -d - destination address
    -s - source address
    -j - jump to target action *** important *** 
    -n - displays port number vice protocol
    -t - specifies a table

example & syntax:

iptables -t <table (filter is default)> -A [chain] [rules] -j [action]

**flush the table. Erase all rules. Default policy doesn't change though.
**DO NOT FLUSH TABLE WITHOUT CHECKING DEFAULT POLICY
iptables -t [table] -F

iptables -t [table] -P [chain] [action]
**change default policy

**view table
iptables -t [table] -L --line-numbers

iptables -t [table] -S
**Lists rules as commands interpreted by the system

iptables -t [table] -I [chain] [rule num] [rules] -j [action]
**Inserts rule before Rule number

iptables -t [table] -D [chain] [rule num]
**Deletes rule at number



sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
** these two together would allow ssh traffic in and out.

6010-6012 **THESE ARE THE PORTS THAT TERMINATOR USES FOR X11 FORWARDING

**allow TERMINATOR x11 ports. 
sudo iptables -A INPUT -p tcp -m multiport --ports 6010,6011,6012 -J ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010,6011,6012 -J ACCEPT
**pro tip: use multiport as much as possible. It is possible to specify d and s ports.


sudo iptables -P OUTPUT DROP
** change default policy to drop.


**reset everything
sudo iptables -P INPUT ACCEPT
sudo iptables -L 
sudo iptables -F
sudo iptables -L 



NFTABLES:
    families:
        ipv4 
        ipv6
        inet (ipv4&6)
        arp
        bridge (traffic going over bridges)
        netdev (user defined)

chain types:
    filter 
    route
    nat

    hooks:
        PREROUTING
        POSTROUTING
        INPUT
        OUTPUT
        FORWARE
        INGRESS (for netdev only)
        
    
syntax and examples:    

nft add table [family] [table] [chain]

nft add table [family] [table] [chain] { type [type] hook [hook] priority [priority] \; policy [policy] \;}

[chain] = User defined name for the chain.
[type] =  can be filter, route or nat.
[hook] = prerouting, ingress, input, forward, output or
         postrouting.
[priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.
; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.
Use "\" to escape the ";" in bash


  create a rule in the chain
nft add rule [family] [table] [chain] [matches (matches)] [statement]
[matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)
(matches) = these are specific to the [matches] field.
[statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)

modify nftables
nft {list | flush} ruleset
nft {delete | list | flush } table [family] [table]
nft {delete | list | flush } chain [family] [table] [chain]

** look at all the tables.
sudo nft list ruleset


ft list table [family] [table] [-a]

**Adds after position
nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

**Inserts before position
nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

**Replaces rule at handle
nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]

**Deletes rule at handle
nft delete rule [family] [table] [chain] [handle <handle>]



**look at only one table

*make table
sudo nft add table ip add TABLENAME
*make chains
sudo nft add chain ip TABLENAME INPUT { type filter hook input priority 0 \; policy accept \;}
sudo nft add chain ip TALBENAME OUTPUT { type filter hook output priority 1 \; polict accept \;}
*now make the rules
sudo nft insert rule ip TABLENAME INPUT tcp dport 22 accept
sudo nft insert rule ip TABLENAME OUTPUT tcp sport 22 accept
*check your work
sudo nft list table ip TABLENAME
*allow x11, new and established traffic
sudo nft insert rule ip TABLENAME OUTPUT tcp sport {6010, 6011, 6012} ct state {new, established} accept
****do the same thing on dport and INPUT chain

**to change default policy, recreate the chain and set the default policy there.
sudo nft add chain ip TABLENAME INPUT { type filter hook input priority 0 \; policy drop \;}
sudo nft add chain ip TALBENAME OUTPUT { type filter hook output priority 1 \; polict drop \;}

** delete one rule
* see rules by their handles
sudo nft list chain ip TABLENAME output -ann
* now delete the rule
sudo nft delete rule ip TABLENAME OUTPUT handle XX
*check your work.


Check the ctfd resources, instructor cheat sheet is good.




NAT and PAT with IPtables/NFtables

snat        postrouting, input
masquerade  postrouting
dnat        prerouting, output
redirect    prerouting, output


snat:
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 1.1.1.1

dnat:
iptables -t nat -A PREROUTING -o eth0 -J DNAT --to 10.0.0.1

with nftables:
*make table
nft add table ip NAT
*make chains
nft add chain ip NAT PREROUTING {type nat hook prerouting priority 0 \;}
nft add chain ip NAT POSTROUTING {type nat hook postrouting priority 100 \; }


FROM SLIDES:
Source NAT
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.2 oif eth0 snat 144.15.60.11

Destination NAT
nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3

Source NAT w/ masquerade
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.0/24 oif eth0 masquerade

Destination NAT (port forwarding) with redirect
nft add rule ip NAT PREROUTING tcp dport 80 redirect to 8080





ACTIVITY NOTES:

T1
Hostname: BLUE_Host-1
IP: 172.16.82.106
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

T2
Hostname: BLUE_Host-3
IP: 172.16.82.112
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

T3
Hostname: BLUE_INT_DMZ_HOST-1
IP: 172.16.40.10
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

T4
Hostname: (Will be provided by Mission Command)
IP: 10.50.XXX.XXX (Will be Provided by Mission Command)
creds: studentX:passwordX (X = Student Number)
Known Ports: Unknown
Action: Interrogate Target and validate Signatures

T5
Hostname: BLUE_PRIV_HOST-1
IP: 192.168.1.10
creds: student : password
Action: Allow traffic through NAT Capabilities

T6
Hostname: BLUE_PRIV_HOST-3
IP: 192.168.3.30
creds: student : password
Action: Allow traffic through NAT Capabilities
















