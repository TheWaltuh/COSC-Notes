############################################################################################################################################################################################################################

                                                                                      #Linux Exploit Development#

#####################################################################################################################################################################################################

#Buffer Overflow
    #Putting too much bite in a buffer space
        #overloading the buffer with data to crash the system
    #Commen Terms
        HEAP                              #Memory that can be allocated and deallocated
        STACK                             #A contiguous section of memory used for passing arguments
        REGISTERS                         #Storage elements as close as possible to the central processing unit (CPU)
        INTSTRUCTION POINTER (IP)         #a.k.a Program Counter (PC), contains the address of next instruction to be executed
        STACK POINTER (SP)                #Contains the address of the next available space on the stack
        BASE POINTER (BP)                 #The base of the stack
        FUNCTION                          #Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
        SHELLCODE                         #The code that is executed once an exploit successfully takes advantage of a vulnerability

    #Defenses
        #Non executable (NX) stack
        #Address Space Layout Randomization (ASLR)
        #Data Execution Prevention (DEP)
        #Stack Canaries
        #Position Independent Executable (PIE)
        
#GDB
    #Installation of Peda Plugin
        git clone https://github.com/longld/peda.git ~/peda
        echo "source ~/peda/peda.py" >> ~/.gdbinit
    #Common Commands
        disass <FUNCTION>     #Disassemble portion of the program
        info <...>            #Supply info for specific stack areas
        x/256c $<REGISTER>    #Read characters from specific register
        break <address>       #Establish a break point














